/// Este mixin atribui as propriedades necessárias para que os elementos que
/// usam a função ou mixin de colunagem fiquem um ao lado do outro. Usamos
/// flexbox
///
/// @group   Objects [Objetos]
///
/// @param   {string} $justify-content [null] - Determina se o container vai
///                 distribuir o espaço existente e como fará isto de acordo com
///                 os valores da propriedade `justify-content` do flexbox.
///
/// @example scss - Uso
///   .classe-pai-x {
///     @include flex-container;
///   }
///   .classe-pai-y {
///     @include flex-container($justify-content: space-between);
///   }
///
/// @example scss - Compilado
///   .classe-pai-x {
///     display: flex;
///     align-items: flex-start;
///     flex-wrap: wrap;
///   }
///   .classe-pai-y {
///     display: flex;
///     align-items: flex-start;
///     flex-wrap: wrap;
///     justify-content: space-between;
///   }
@mixin flex-container($justify-content: null) {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;

  @if $justify-content != null and type-of($justify-content) != string {
    @warn 'O valor de "$justify-content" deve ser uma string';
  } @else {
    justify-content: $justify-content;
  }
}
