/* line 12, src/styles/objects/_reset.scss */
html, body, main, article, nav, aside, section,
header, footer, address, div,
h1, h2, h3, h4, h5, h6, p, blockquote, ol, ul, li, dl, dt, dd,
hr, pre, figure, figcaption,
table, caption, thead, tbody, tfoot, tr, th, td, col, colgroup,
form, fieldset, legend, label, input, button, select, datalist,
optgroup, option, textarea, progress, meter,
img, iframe, embed, object, param, video, audio, source,
canvas, track, map, area, del, ins,
a, em, strong, i, b, u, s, small, abbr, q, cite, dfn, sub, sup,
time, code, kbd, samp, var, bdi, bdo, ruby, rt, rp, wbr,
mark, span, br {
  padding: 0;
  margin: 0;
  font-size: 100%;
  font-style: normal;
  font-weight: normal;
  vertical-align: baseline;
  background: transparent;
  box-sizing: border-box;
}

/* line 36, src/styles/objects/_reset.scss */
button,
select,
textarea,
input {
  max-width: 100%;
  color: inherit;
  font-family: inherit;
  line-height: inherit;
  vertical-align: middle;
}

/* line 48, src/styles/objects/_reset.scss */
button::-moz-focus-inner {
  border: 0;
}

/* line 53, src/styles/objects/_reset.scss */
a {
  text-decoration: none;
}

/* line 57, src/styles/objects/_reset.scss */
img,
svg {
  max-width: 100%;
  border: 0;
}

/* line 62, src/styles/objects/_reset.scss */
a img, a
svg {
  display: block;
}

/* line 67, src/styles/objects/_reset.scss */
ul,
ol {
  list-style-type: none;
}

/* line 72, src/styles/objects/_reset.scss */
hr {
  border: 0;
}

/* line 76, src/styles/objects/_reset.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 81, src/styles/objects/_reset.scss */
caption,
th,
td {
  text-align: left;
}

/* line 87, src/styles/objects/_reset.scss */
::after,
::before {
  box-sizing: inherit;
}

/* line 95, src/styles/objects/_reset.scss */
input:-webkit-autofill,
select:-webkit-autofill,
textarea:-webkit-autofill {
  transition-delay: 999999s;
}

/* line 1, src/styles/components/_header.scss */
.cover {
  background-image: url(../images/backgrounds/sao-caetano-do-sul.jpg);
  background-size: cover;
  background-repeat: no-repeat;
  background-color: rgba(0, 0, 0, 0.3);
  color: #fff;
  position: relative;
  z-index: 930;
  min-height: 100vh;
  overflow: hidden;
}

@media (min-width: 62em) {
  /* line 1, src/styles/components/_header.scss */
  .cover {
    background-size: auto;
    background-position: bottom right;
    background-color: rgba(0, 0, 0, 0.3);
    height: 100vh;
  }
}

/* line 27, src/styles/components/_header.scss */
.cover::before, .cover::after {
  content: '';
  display: inline-block;
  width: 100%;
  height: 100vh;
  display: none;
  position: absolute;
  z-index: -1;
  width: 100%;
  background-size: cover;
  background-repeat: no-repeat;
}

@media (min-width: 62em) {
  /* line 27, src/styles/components/_header.scss */
  .cover::before, .cover::after {
    display: block;
  }
}

/* line 47, src/styles/components/_header.scss */
.cover::before {
  -webkit-transform: skewY(13deg) translateY(-63vh);
          transform: skewY(13deg) translateY(-63vh);
  background-color: rgba(255, 255, 255, 0.5);
  background-position: 70% 0;
  opacity: .7;
}

/* line 59, src/styles/components/_header.scss */
.cover::after {
  -webkit-transform: skewY(-15deg) translateY(-28vh);
          transform: skewY(-15deg) translateY(-28vh);
  background-color: rgba(0, 0, 0, 0.3);
}

/* line 67, src/styles/components/_header.scss */
.cover .social-media {
  position: absolute;
  bottom: 1.25rem;
  text-align: center;
  width: 100%;
}

@media (min-width: 62em) {
  /* line 67, src/styles/components/_header.scss */
  .cover .social-media {
    right: 0;
    text-align: right;
  }
}

/* line 79, src/styles/components/_header.scss */
.cover .hashtags {
  display: none;
}

@media (min-width: 62em) {
  /* line 79, src/styles/components/_header.scss */
  .cover .hashtags {
    display: block;
    position: absolute;
    top: 50%;
    right: 0;
    max-width: 35%;
    text-align: right;
    font-size: 2.5rem;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);
    padding: 0.625rem;
  }
}

/* line 97, src/styles/components/_header.scss */
.cover .hashtags a {
  text-shadow: 0.0625rem 0.0625rem 0.1875rem #000000;
  color: #fff;
  border-color: #fdc200;
}

/* line 102, src/styles/components/_header.scss */
.cover .hashtags a + a {
  margin-top: 0.3125rem;
}

/* line 106, src/styles/components/_header.scss */
.cover .hashtags a:hover, .cover .hashtags a:focus {
  text-shadow: none;
  color: #000000;
  border-color: #000000;
}

/* line 115, src/styles/components/_header.scss */
.cover .wrapper {
  position: relative;
  height: 100vh;
}

@media (min-width: 62em) {
  /* line 115, src/styles/components/_header.scss */
  .cover .wrapper {
    z-index: 50;
    width: 100%;
  }
}

/* line 125, src/styles/components/_header.scss */
.cover time {
  display: block;
  margin-top: 1.875rem;
  margin-bottom: 1.875rem;
  font-size: 2.125rem;
  font-weight: bold;
  color: #fdc200;
  text-shadow: 0.0625rem 0.0625rem 0.1875rem #000000;
}

@media (min-width: 62em) {
  /* line 125, src/styles/components/_header.scss */
  .cover time {
    margin-bottom: 1.25rem;
  }
}

/* line 142, src/styles/components/_header.scss */
.cover p {
  font-weight: bold;
  margin-bottom: 3.75rem;
}

@media (min-width: 62em) {
  /* line 142, src/styles/components/_header.scss */
  .cover p {
    margin-bottom: 1.25rem;
  }
}

/* line 151, src/styles/components/_header.scss */
.cover .logo {
  position: relative;
  display: block;
  text-align: left;
  width: 50%;
  max-width: 330px;
}

@media (min-width: 62em) {
  /* line 151, src/styles/components/_header.scss */
  .cover .logo {
    margin: 1.875rem auto;
    text-align: center;
  }
}

/* line 163, src/styles/components/_header.scss */
.cover .logo img {
  position: relative;
  z-index: 50;
}

/* line 169, src/styles/components/_header.scss */
.cover .intro {
  color: #fff;
  text-shadow: 0.0625rem 0.0625rem 0.1875rem #000000;
}

@media (min-width: 62em) {
  /* line 169, src/styles/components/_header.scss */
  .cover .intro {
    position: absolute;
    top: 48%;
    left: 0;
    width: 50%;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);
  }
}

/* line 181, src/styles/components/_header.scss */
.cover .intro h1 {
  margin: 1.875rem 0;
}

/* line 185, src/styles/components/_header.scss */
.cover .intro h2 {
  color: #fff;
  display: none;
  margin: 1.875rem 0;
}

/* line 190, src/styles/components/_header.scss */
.cover .intro h2::before, .cover .intro h2::after {
  content: none;
}

@media (min-width: 62em) {
  /* line 185, src/styles/components/_header.scss */
  .cover .intro h2 {
    display: block;
  }
}

/* line 200, src/styles/components/_header.scss */
.cover .intro .buy {
  display: block;
  margin: 1.875rem auto;
  padding: 0.625rem;
  width: 12.5rem;
  background: #fdc200;
  box-shadow: 0.0625rem 0.0625rem 0.3125rem #333;
  border-radius: 0.25rem;
  color: #000000;
  text-transform: uppercase;
  text-shadow: none;
  font-weight: bold;
  text-decoration: none;
  border: 0;
}

/* line 217, src/styles/components/_header.scss */
.cover .intro .buy:hover, .cover .intro .buy:focus {
  background-color: #ffedb1;
}

/* line 222, src/styles/components/_header.scss */
.cover .intro .buy:active {
  background-color: #4b3900;
  color: #fff;
}

/* line 229, src/styles/components/_header.scss */
.cover .is-fixed {
  position: fixed;
  top: 0;
  left: 50%;
  width: 100%;
  padding: 0.625rem 6.25vw;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
  background-color: #fff;
  box-shadow: 0.0625rem 0.0625rem 0.1875rem #000000;
}

/* line 240, src/styles/components/_header.scss */
.cover .is-fixed .mobile-nav {
  color: #333333;
  text-shadow: none;
}

/* line 1, src/styles/components/_main-nav.scss */
.main-nav {
  background: #fdc200;
  position: fixed;
  top: 0;
  right: 0;
  height: 100%;
  width: 85vw;
  padding-top: 3.75rem;
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
  transition: -webkit-transform 0.6s ease-out;
  transition: transform 0.6s ease-out;
  transition: transform 0.6s ease-out, -webkit-transform 0.6s ease-out;
  z-index: 950;
}

@media (min-width: 62em) {
  /* line 1, src/styles/components/_main-nav.scss */
  .main-nav {
    background-color: #f4d11e;
    box-shadow: 0 0 0.3125rem 0.125rem rgba(0, 0, 0, 0.4);
    -webkit-transform: translate(0);
            transform: translate(0);
    width: 100%;
    height: auto;
    padding: 0.3125rem;
  }
}

/* line 30, src/styles/components/_main-nav.scss */
.main-nav a {
  display: block;
  text-align: right;
  padding: 0.625rem 1.25rem;
  font-size: 1.25rem;
  text-transform: uppercase;
}

@media (min-width: 62em) {
  /* line 30, src/styles/components/_main-nav.scss */
  .main-nav a {
    display: inline-block;
    text-transform: none;
    padding: 0.25rem 0.375rem;
    margin-left: 0.625rem;
    margin-right: 0.625rem;
    border: 0;
  }
}

/* line 52, src/styles/components/_main-nav.scss */
.main-nav a:hover, .main-nav a:focus {
  text-shadow: none;
  color: #fff;
  background-color: #000000;
}

@media (min-width: 62em) {
  /* line 60, src/styles/components/_main-nav.scss */
  .main-nav .go-to-start {
    display: none;
  }
}

/* line 65, src/styles/components/_main-nav.scss */
.main-nav .go-to-start span {
  position: absolute;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  border: 0;
}

/* line 70, src/styles/components/_main-nav.scss */
.main-nav.is-active {
  -webkit-transform: translateX(0);
          transform: translateX(0);
}

/* line 75, src/styles/components/_main-nav.scss */
.social-media {
  text-align: center;
  word-spacing: 1.25rem;
}

/* line 79, src/styles/components/_main-nav.scss */
.social-media a {
  border-radius: 50%;
  border: 0;
  padding: 0.125rem;
  background-color: transparent;
}

/* line 85, src/styles/components/_main-nav.scss */
.social-media a:hover, .social-media a:focus {
  color: #333;
}

/* line 92, src/styles/components/_main-nav.scss */
.mobile-nav {
  display: block;
  background: #333333;
  border: 0;
  outline: none;
  position: absolute;
  cursor: pointer;
  top: 1.25rem;
  right: 0;
  height: 0.3125rem;
  width: 1.875rem;
  text-shadow: 0.0625rem 0.0625rem 0.125rem #333, 0 0 0.2em #333;
  transition: background-color 0.2s linear;
  z-index: 950;
}

@media (min-width: 62em) {
  /* line 92, src/styles/components/_main-nav.scss */
  .mobile-nav {
    display: none;
  }
}

/* line 116, src/styles/components/_main-nav.scss */
.mobile-nav:before, .mobile-nav:after {
  content: '';
  display: inline-block;
  width: 0.3125rem;
  height: 1.875rem;
  background: #333333;
  position: absolute;
  right: 0;
  transition: -webkit-transform 0.4s ease-in-out;
  transition: transform 0.4s ease-in-out;
  transition: transform 0.4s ease-in-out, -webkit-transform 0.4s ease-in-out;
}

/* line 128, src/styles/components/_main-nav.scss */
.mobile-nav:before {
  top: -0.625rem;
}

/* line 132, src/styles/components/_main-nav.scss */
.mobile-nav:after {
  top: 0.625rem;
}

/* line 136, src/styles/components/_main-nav.scss */
.mobile-nav span {
  display: block;
  min-width: 100%;
  min-height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.625rem 1.25rem;
  font-weight: 700;
}

/* line 147, src/styles/components/_main-nav.scss */
.mobile-nav.is-active {
  background-color: transparent;
  position: fixed;
  right: 1.875rem;
  z-index: 952;
}

/* line 154, src/styles/components/_main-nav.scss */
.mobile-nav.is-active:before, .mobile-nav.is-active:after {
  top: 0;
}

/* line 159, src/styles/components/_main-nav.scss */
.mobile-nav.is-active:before {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}

/* line 163, src/styles/components/_main-nav.scss */
.mobile-nav.is-active:after {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
}

/* line 167, src/styles/components/_main-nav.scss */
.mobile-nav.is-active span {
  position: absolute;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  border: 0;
}

/* line 3, src/styles/components/_about.scss */
.about-event h2 span {
  font-weight: bold;
  letter-spacing: 0.125rem;
}

/* line 9, src/styles/components/_about.scss */
.about-event svg {
  max-height: 2em;
  max-width: 2em;
  margin-right: 0.625rem;
}

/* line 1, src/styles/components/_speakers.scss */
.speakers {
  position: relative;
}

@media (min-width: 62em) {
  /* line 1, src/styles/components/_speakers.scss */
  .speakers {
    padding-bottom: 5.625rem;
  }
  /* line 8, src/styles/components/_speakers.scss */
  .speakers::before, .speakers::after {
    content: '';
    display: inline-block;
    width: 100%;
    height: 100vh;
    position: absolute;
    top: 50%;
    z-index: -1;
  }
  /* line 17, src/styles/components/_speakers.scss */
  .speakers::before {
    background-color: #fdc200;
    -webkit-transform: skewY(13deg) translateY(-120%);
            transform: skewY(13deg) translateY(-120%);
  }
  /* line 22, src/styles/components/_speakers.scss */
  .speakers::after {
    background-color: #333333;
    -webkit-transform: skewY(-13deg) translateY(20%);
            transform: skewY(-13deg) translateY(20%);
  }
}

/* line 28, src/styles/components/_speakers.scss */
.speakers .all-speaker {
  position: relative;
  z-index: 50;
}

@media (min-width: 62em) {
  /* line 28, src/styles/components/_speakers.scss */
  .speakers .all-speaker {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    padding-top: 1.875rem;
  }
}

/* line 41, src/styles/components/_speakers.scss */
.speaker {
  max-width: 16.25rem;
  margin: 1.25rem auto;
  overflow: hidden;
  transition: -webkit-filter 0.4s ease-in;
  transition: filter 0.4s ease-in;
  transition: filter 0.4s ease-in, -webkit-filter 0.4s ease-in;
}

@media (min-width: 62em) {
  /* line 41, src/styles/components/_speakers.scss */
  .speaker {
    margin: 0;
    position: relative;
  }
}

@media (min-width: 62em) {
  /* line 54, src/styles/components/_speakers.scss */
  .speaker:hover {
    -webkit-filter: grayscale(1);
    -moz-filter: grayscale(1);
    filter: grayscale(1);
  }
}

@media (min-width: 62em) {
  /* line 61, src/styles/components/_speakers.scss */
  .speaker:hover > .info {
    background: rgba(0, 0, 0, 0.6);
    top: 100%;
    color: #fff;
    -webkit-transform: translateY(-100%);
            transform: translateY(-100%);
  }
}

/* line 72, src/styles/components/_speakers.scss */
.speaker img {
  display: block;
  height: 21.875rem;
  width: 16.25rem;
  overflow: hidden;
}

/* line 80, src/styles/components/_speakers.scss */
.speaker .info {
  margin: 0.625rem auto;
  z-index: 930;
  transition: background 3s linear;
  transition-delay: 1s;
}

@media (min-width: 62em) {
  /* line 80, src/styles/components/_speakers.scss */
  .speaker .info {
    height: 21.875rem;
    position: absolute;
    margin: 0;
    padding-left: 0.625rem;
    padding-top: 1.25rem;
    text-align: left;
    transition: -webkit-transform 0.5s ease-in-out;
    transition: transform 0.5s ease-in-out;
    transition: transform 0.5s ease-in-out, -webkit-transform 0.5s ease-in-out;
  }
}

/* line 101, src/styles/components/_speakers.scss */
.speaker .info h4 {
  color: #000000;
  font-size: 1.25rem;
  margin-bottom: 0.625rem;
}

@media (min-width: 62em) {
  /* line 101, src/styles/components/_speakers.scss */
  .speaker .info h4 {
    text-align: center;
    color: #fff;
    font-weight: bold;
  }
}

/* line 112, src/styles/components/_speakers.scss */
.speaker .info h4::before, .speaker .info h4::after {
  color: #fdc200;
  font-weight: bold;
}

@media (min-width: 62em) {
  /* line 112, src/styles/components/_speakers.scss */
  .speaker .info h4::before, .speaker .info h4::after {
    color: #fdc200;
  }
}

/* line 122, src/styles/components/_speakers.scss */
.speaker .info h4::before {
  content: "<";
  margin-right: 0.3125em;
}

/* line 127, src/styles/components/_speakers.scss */
.speaker .info h4::after {
  content: ">";
  margin-left: 0.3125em;
}

/* line 133, src/styles/components/_speakers.scss */
.speaker .info a {
  color: #333;
  margin-top: 0.625rem;
  margin-bottom: 0.625rem;
}

@media (min-width: 62em) {
  /* line 133, src/styles/components/_speakers.scss */
  .speaker .info a {
    color: #fff;
  }
}

@media (min-width: 62em) {
  /* line 144, src/styles/components/_speakers.scss */
  .speaker .info a:hover, .speaker .info a:focus {
    color: #000000;
  }
}

@media (min-width: 62em) {
  /* line 152, src/styles/components/_speakers.scss */
  .speaker .info p {
    font-size: 0.875rem;
  }
}

/* line 1, src/styles/components/_schedule.scss */
.schedule {
  background: #333333;
  color: #fff;
  padding-bottom: 1.875rem;
}

/* line 6, src/styles/components/_schedule.scss */
.schedule .wrapper {
  max-width: 100%;
}

/* line 10, src/styles/components/_schedule.scss */
.schedule .schedule-table {
  max-width: 100%;
  overflow-x: auto;
}

@media (min-width: 62em) {
  /* line 10, src/styles/components/_schedule.scss */
  .schedule .schedule-table {
    overflow-x: initial;
  }
}

/* line 19, src/styles/components/_schedule.scss */
.schedule .mobile-disclaimer {
  color: #ababab;
  font-style: italic;
}

@media (min-width: 62em) {
  /* line 19, src/styles/components/_schedule.scss */
  .schedule .mobile-disclaimer {
    display: none;
  }
}

/* line 28, src/styles/components/_schedule.scss */
.schedule h2 {
  color: #fff;
}

/* line 32, src/styles/components/_schedule.scss */
.schedule a {
  color: #fff;
  border-bottom: solid 0.125rem #fdc200;
  margin-bottom: 0.625rem;
}

/* line 37, src/styles/components/_schedule.scss */
.schedule a:hover, .schedule a:focus {
  color: #000000;
}

/* line 43, src/styles/components/_schedule.scss */
.schedule .title {
  color: #fdc200;
  font-weight: bold;
  font-size: 1.25rem;
  border: 0;
  text-align: left;
  padding-bottom: 0.625rem;
}

/* line 52, src/styles/components/_schedule.scss */
.schedule table {
  width: 100%;
}

/* line 55, src/styles/components/_schedule.scss */
.schedule table div {
  opacity: .8;
}

/* line 61, src/styles/components/_schedule.scss */
.schedule thead th {
  font-size: 1.25rem;
  vertical-align: middle;
}

/* line 67, src/styles/components/_schedule.scss */
.schedule th {
  text-align: center;
  color: #fdc200;
}

/* line 71, src/styles/components/_schedule.scss */
.schedule th span {
  display: block;
  color: #fff;
  font-size: 0.875rem;
}

/* line 78, src/styles/components/_schedule.scss */
.schedule th,
.schedule td {
  position: relative;
  padding: 1.25rem 1.875rem;
}

/* line 85, src/styles/components/_schedule.scss */
.schedule tbody th,
.schedule tbody td {
  border-top: solid 0.0625rem #ababab;
}

/* line 90, src/styles/components/_schedule.scss */
.schedule tbody [rowspan] {
  border-left: solid 0.0625rem #ababab;
}

/* line 94, src/styles/components/_schedule.scss */
.schedule tbody [colspan="3"] {
  background-color: rgba(255, 255, 255, 0.1);
}

/* line 98, src/styles/components/_schedule.scss */
.schedule tbody td {
  min-width: 17.5rem;
}

@media (min-width: 62em) {
  /* line 98, src/styles/components/_schedule.scss */
  .schedule tbody td {
    min-width: auto;
  }
}

/* line 107, src/styles/components/_schedule.scss */
.schedule p {
  max-width: 100%;
}

/* line 111, src/styles/components/_schedule.scss */
.schedule .highlight-uppercase {
  text-transform: uppercase;
}

@media (min-width: 62em) {
  /* line 35, src/styles/tools/mixins/objects/_clearfix.scss */
  .location .wrapper::after {
    content: '';
    display: table;
    clear: both;
  }
  /* line 6, src/styles/components/_location.scss */
  .location .wrapper div {
    float: left;
    width: 50%;
    text-align: left;
  }
}

/* line 14, src/styles/components/_location.scss */
.location iframe {
  display: none;
}

@media (min-width: 62em) {
  /* line 14, src/styles/components/_location.scss */
  .location iframe {
    display: block;
    float: right;
    margin-top: 1.875rem;
    margin-bottom: 1.875rem;
  }
}

/* line 2, src/styles/components/_sponsors.scss */
.sponsors h3 {
  position: relative;
  margin-top: 3.75rem;
  padding-top: 3.75rem;
}

/* line 8, src/styles/components/_separator.scss */
.sponsors h3::before, .sponsors h3::after {
  content: '';
  display: inline-block;
  width: 30vw;
  height: 0.1875rem;
  position: absolute;
  left: 50%;
}

/* line 16, src/styles/components/_separator.scss */
.sponsors h3::before {
  top: 0;
  background-color: #fdc200;
  -webkit-transform: translateX(-80%);
          transform: translateX(-80%);
}

/* line 22, src/styles/components/_separator.scss */
.sponsors h3::after {
  top: 0.375rem;
  background-color: #666;
  -webkit-transform: translateX(-25%);
          transform: translateX(-25%);
}

/* line 6, src/styles/components/_sponsors.scss */
.sponsors a {
  margin-top: 0.625rem;
  margin-bottom: 0.625rem;
  padding: 0;
  border: 0;
}

@media (min-width: 62em) {
  /* line 6, src/styles/components/_sponsors.scss */
  .sponsors a {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
  }
}

/* line 21, src/styles/components/_sponsors.scss */
.sponsors a:hover, .sponsors a:focus {
  background-color: #f0f0f0;
}

/* line 26, src/styles/components/_sponsors.scss */
.sponsors a:active {
  background-color: #f4d11e;
}

/* line 31, src/styles/components/_sponsors.scss */
.sponsors img {
  display: block;
  width: 100%;
}

/* line 36, src/styles/components/_sponsors.scss */
.sponsors .sponsor {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  align-content: center;
  max-width: 67.5rem;
}

/* line 46, src/styles/components/_sponsors.scss */
.sponsors .two-mega a {
  max-width: 20rem;
}

/* line 51, src/styles/components/_sponsors.scss */
.sponsors .one-mega {
  position: relative;
  margin-top: 3.75rem;
  padding-top: 3.75rem;
}

/* line 8, src/styles/components/_separator.scss */
.sponsors .one-mega::before, .sponsors .one-mega::after {
  content: '';
  display: inline-block;
  width: 30vw;
  height: 0.1875rem;
  position: absolute;
  left: 50%;
}

/* line 16, src/styles/components/_separator.scss */
.sponsors .one-mega::before {
  top: 0;
  background-color: #fdc200;
  -webkit-transform: translateX(-80%);
          transform: translateX(-80%);
}

/* line 22, src/styles/components/_separator.scss */
.sponsors .one-mega::after {
  top: 0.375rem;
  background-color: #666;
  -webkit-transform: translateX(-25%);
          transform: translateX(-25%);
}

/* line 54, src/styles/components/_sponsors.scss */
.sponsors .one-mega a {
  width: 65vw;
  max-width: 15.625rem;
}

/* line 60, src/styles/components/_sponsors.scss */
.sponsors .half-mega {
  position: relative;
  margin-top: 3.75rem;
  padding-top: 3.75rem;
}

/* line 8, src/styles/components/_separator.scss */
.sponsors .half-mega::before, .sponsors .half-mega::after {
  content: '';
  display: inline-block;
  width: 30vw;
  height: 0.1875rem;
  position: absolute;
  left: 50%;
}

/* line 16, src/styles/components/_separator.scss */
.sponsors .half-mega::before {
  top: 0;
  background-color: #fdc200;
  -webkit-transform: translateX(-80%);
          transform: translateX(-80%);
}

/* line 22, src/styles/components/_separator.scss */
.sponsors .half-mega::after {
  top: 0.375rem;
  background-color: #666;
  -webkit-transform: translateX(-25%);
          transform: translateX(-25%);
}

/* line 63, src/styles/components/_sponsors.scss */
.sponsors .half-mega a {
  width: 50vw;
  max-width: 11.25rem;
}

/* line 70, src/styles/components/_sponsors.scss */
.sponsors .support a {
  max-width: 7.5rem;
}

/* line 1, src/styles/components/_footer.scss */
.footer {
  background: #333333;
  color: #fdc200;
  font-size: 0.875rem;
}

/* line 6, src/styles/components/_footer.scss */
.footer h5 {
  font-weight: bold;
  text-transform: uppercase;
}

/* line 16, src/styles/main.scss */
body {
  font-family: "Lato", sans-serif;
  color: #333;
}

/* line 21, src/styles/main.scss */
h1 {
  font-size: 1.6875rem;
}

/* line 25, src/styles/main.scss */
h2 {
  font-size: 1.6875rem;
  font-weight: bold;
  margin-bottom: 1.25rem;
  color: #000000;
  padding-top: 1.25rem;
}

/* line 32, src/styles/main.scss */
h2::before, h2::after {
  color: #fdc200;
  font-weight: bold;
}

/* line 38, src/styles/main.scss */
h2::before {
  content: "<";
  margin-right: 0.3125em;
}

/* line 43, src/styles/main.scss */
h2::after {
  content: ">";
  margin-left: 0.3125em;
}

/* line 49, src/styles/main.scss */
h3 {
  font-size: 1.25rem;
  font-weight: bold;
  margin: 3.75rem 0 1.25rem;
  color: #000000;
}

@media (min-width: 62em) {
  /* line 49, src/styles/main.scss */
  h3 {
    font-size: 1.6875rem;
  }
}

/* line 60, src/styles/main.scss */
svg {
  fill: currentColor;
  vertical-align: middle;
  display: inline-block;
}

/* line 66, src/styles/main.scss */
a {
  display: inline-block;
  font-weight: bold;
  color: #000000;
  display: inline-block;
  border-bottom: solid 0.125rem #333;
  padding: 0.1875rem 0.3125rem;
}

/* line 75, src/styles/main.scss */
a:hover, a:focus {
  background-color: #f4d11e;
}

/* line 80, src/styles/main.scss */
a:active {
  background-color: #fff;
}

/* line 85, src/styles/main.scss */
p {
  width: 100%;
  max-width: 43.75rem;
  margin-left: auto;
  margin-right: auto;
}

/* line 93, src/styles/main.scss */
p + p {
  margin-top: 1.25rem;
}

/* line 98, src/styles/main.scss */
strong {
  font-weight: bold;
  color: #000000;
}

/* line 103, src/styles/main.scss */
table {
  max-width: 100%;
}

/* line 107, src/styles/main.scss */
section {
  width: 100%;
  padding-top: 1.875rem;
  padding-bottom: 1.875rem;
}

/* line 115, src/styles/main.scss */
.wrapper {
  margin: 0 auto;
  padding-top: 1.25rem;
  padding-bottom: 1.25rem;
  width: 85vw;
  max-width: 100%;
  text-align: center;
}

@media (min-width: 62em) {
  /* line 115, src/styles/main.scss */
  .wrapper {
    max-width: 68.75rem;
  }
}

/* line 130, src/styles/main.scss */
.highlight {
  font-weight: bold;
  margin: 1.875rem auto 1.25rem;
  max-width: 100%;
}

@media (min-width: 62em) {
  /* line 130, src/styles/main.scss */
  .highlight {
    font-size: 1.25rem;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzL21haW4uY3NzIiwic291cmNlcyI6WyJzdHlsZXMvbWFpbi5zY3NzIiwic3R5bGVzL19pbXBvcnQtY29yZS10b29scy5zY3NzIiwic3R5bGVzL3Rvb2xzL2Z1bmN0aW9ucy9fbWFwLWRlZXAtZ2V0LnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19jbGVhbi11bml0LnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19kZWNpbWFsLWZsb29yLnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19lbS5zY3NzIiwic3R5bGVzL3Rvb2xzL2Z1bmN0aW9ucy9fcmVtLnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL192dy5zY3NzIiwic3R5bGVzL3Rvb2xzL2Z1bmN0aW9ucy9fcGVyY2VudC5zY3NzIiwic3R5bGVzL3Rvb2xzL2Z1bmN0aW9ucy9fY29sdW1uLnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19vZmZzZXQuc2NzcyIsInN0eWxlcy90b29scy9mdW5jdGlvbnMvX3NwYWNlLnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19jb2xvci5zY3NzIiwic3R5bGVzL3Rvb2xzL2Z1bmN0aW9ucy9fbGF5ZXIuc2NzcyIsInN0eWxlcy90b29scy9mdW5jdGlvbnMvX2ZvbnQtd2VpZ2h0LnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19mb250LXNpemUuc2NzcyIsInN0eWxlcy90b29scy9mdW5jdGlvbnMvX3N2Zy1iYWNrZ3JvdW5kLnNjc3MiLCJzdHlsZXMvdG9vbHMvZnVuY3Rpb25zL19vcHBvc2l0ZS1kaXJlY3Rpb24uc2NzcyIsInN0eWxlcy90b29scy9mdW5jdGlvbnMvX3RvLWV2ZW4uc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvX2Nzcy1jb250ZW50LnNjc3MiLCJzdHlsZXMvdG9vbHMvbWl4aW5zL19oaWRlLWVsZW1lbnQuc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvX2hpZGUtdGV4dC5zY3NzIiwic3R5bGVzL3Rvb2xzL21peGlucy9fcmVzcG9uZC10by5zY3NzIiwic3R5bGVzL3Rvb2xzL21peGlucy9fc2hvdy1lbGVtZW50LnNjc3MiLCJzdHlsZXMvdG9vbHMvbWl4aW5zL19zdmctaWNvbi5zY3NzIiwic3R5bGVzL3Rvb2xzL21peGlucy9fdmlldy1tYXJnaW5zLnNjc3MiLCJzdHlsZXMvdG9vbHMvbWl4aW5zL19jb2x1bW4uc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvX2FsbC1pbnB1dC10ZXh0LWxpa2Uuc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvX3RyaWFuZ2xlLnNjc3MiLCJzdHlsZXMvdG9vbHMvbWl4aW5zL19lbGxpcHNpcy5zY3NzIiwic3R5bGVzL3Rvb2xzL21peGlucy9fY3VzdG9tLXJhZGlvLWNoZWNrYm94LnNjc3MiLCJzdHlsZXMvdG9vbHMvbWl4aW5zL19jdXN0b20tcmFkaW8tY2hlY2tib3gtaG92ZXIuc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvX2N1c3RvbS1yYWRpby1jaGVja2JveC1jaGVja2VkLnNjc3MiLCJzdHlsZXMvdG9vbHMvbWl4aW5zL19vdmVybGF5LWNvbmZpZy5zY3NzIiwic3R5bGVzL3Rvb2xzL21peGlucy9fY2VudGVyLWVsZW1lbnQuc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvb2JqZWN0cy9fY2xlYXJmaXguc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvb2JqZWN0cy9fZmxleC1jb250YWluZXIuc2NzcyIsInN0eWxlcy90b29scy9taXhpbnMvb2JqZWN0cy9faGFzLWJsb2Nrcy5zY3NzIiwic3R5bGVzL3Rvb2xzL21peGlucy9vYmplY3RzL19ncmlkLXdyYXBwZXIuc2NzcyIsInN0eWxlcy9faW1wb3J0LWNvcmUtc2V0dGluZ3Muc2NzcyIsInN0eWxlcy9zZXR0aW5ncy9fYnJlYWtwb2ludHMuc2NzcyIsInN0eWxlcy9zZXR0aW5ncy9fYnJvd3Nlci1taW4tdmVyc2lvbi5zY3NzIiwic3R5bGVzL3NldHRpbmdzL19ncmlkLnNjc3MiLCJzdHlsZXMvc2V0dGluZ3MvX3NwYWNlcy5zY3NzIiwic3R5bGVzL3NldHRpbmdzL196LWluZGV4LnNjc3MiLCJzdHlsZXMvc2V0dGluZ3MvX3VpLWNvbG9ycy5zY3NzIiwic3R5bGVzL3NldHRpbmdzL19icmFuZC1jb2xvcnMuc2NzcyIsInN0eWxlcy9zZXR0aW5ncy9fdWktZm9udHMuc2NzcyIsInN0eWxlcy9zZXR0aW5ncy9fYnJhbmQtZm9udHMuc2NzcyIsInN0eWxlcy9zZXR0aW5ncy9fZm9udC1zaXplcy5zY3NzIiwic3R5bGVzL3NldHRpbmdzL19pbnB1dC10ZXh0LWxpa2UtdHlwZXMuc2NzcyIsInN0eWxlcy9zZXR0aW5ncy9fZ2xvYmFsLWNvbnN0YW50cy5zY3NzIiwic3R5bGVzL19zZXR0aW5ncy5zY3NzIiwic3R5bGVzL29iamVjdHMvX3Jlc2V0LnNjc3MiLCJzdHlsZXMvY29tcG9uZW50cy9fc2VwYXJhdG9yLnNjc3MiLCJzdHlsZXMvY29tcG9uZW50cy9faGVhZGVyLnNjc3MiLCJzdHlsZXMvY29tcG9uZW50cy9fbWFpbi1uYXYuc2NzcyIsInN0eWxlcy9jb21wb25lbnRzL19hYm91dC5zY3NzIiwic3R5bGVzL2NvbXBvbmVudHMvX3NwZWFrZXJzLnNjc3MiLCJzdHlsZXMvY29tcG9uZW50cy9fc2NoZWR1bGUuc2NzcyIsInN0eWxlcy9jb21wb25lbnRzL19sb2NhdGlvbi5zY3NzIiwic3R5bGVzL2NvbXBvbmVudHMvX3Nwb25zb3JzLnNjc3MiLCJzdHlsZXMvY29tcG9uZW50cy9fY29udGFjdC5zY3NzIiwic3R5bGVzL2NvbXBvbmVudHMvX2Zvb3Rlci5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCIuL2ltcG9ydC1jb3JlLXRvb2xzXCI7XHJcbkBpbXBvcnQgXCIuL2ltcG9ydC1jb3JlLXNldHRpbmdzXCI7XHJcbkBpbXBvcnQgXCIuL3NldHRpbmdzXCI7XHJcbkBpbXBvcnQgXCIuL29iamVjdHMvcmVzZXRcIjtcclxuQGltcG9ydCBcIi4vY29tcG9uZW50cy9zZXBhcmF0b3JcIjtcclxuQGltcG9ydCBcIi4vY29tcG9uZW50cy9oZWFkZXJcIjtcclxuQGltcG9ydCBcIi4vY29tcG9uZW50cy9tYWluLW5hdlwiO1xyXG5AaW1wb3J0IFwiLi9jb21wb25lbnRzL2Fib3V0XCI7XHJcbkBpbXBvcnQgXCIuL2NvbXBvbmVudHMvc3BlYWtlcnNcIjtcclxuQGltcG9ydCBcIi4vY29tcG9uZW50cy9zY2hlZHVsZVwiO1xyXG5AaW1wb3J0IFwiLi9jb21wb25lbnRzL2xvY2F0aW9uXCI7XHJcbkBpbXBvcnQgXCIuL2NvbXBvbmVudHMvc3BvbnNvcnNcIjtcclxuQGltcG9ydCBcIi4vY29tcG9uZW50cy9jb250YWN0XCI7XHJcbkBpbXBvcnQgXCIuL2NvbXBvbmVudHMvZm9vdGVyXCI7XHJcblxyXG5ib2R5IHtcclxuICBmb250LWZhbWlseTogXCJMYXRvXCIsIHNhbnMtc2VyaWY7XHJcbiAgY29sb3I6IGNvbG9yKGRhcmspO1xyXG59XHJcblxyXG5oMSB7XHJcbiAgZm9udC1zaXplOiBmb250LXNpemUoeGxhcmdlKTtcclxufVxyXG5cclxuaDIge1xyXG4gIGZvbnQtc2l6ZTogZm9udC1zaXplKHhsYXJnZSk7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLWJvdHRvbTogc3BhY2UobWVkaXVtKTtcclxuICBjb2xvcjogY29sb3IoZGFyaywgZGFya2VzdCk7XHJcbiAgcGFkZGluZy10b3A6IHNwYWNlKG1lZGl1bSk7XHJcblxyXG4gICY6OmJlZm9yZSxcclxuICAmOjphZnRlciB7XHJcbiAgICBjb2xvcjogY29sb3IocHJpbWFyeSk7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcblxyXG4gICY6OmJlZm9yZSB7XHJcbiAgICBjb250ZW50OiBcIjxcIjtcclxuICAgIG1hcmdpbi1yaWdodDogZW0oc3BhY2UoeHNtYWxsKSk7XHJcbiAgfVxyXG5cclxuICAmOjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIj5cIjtcclxuICAgIG1hcmdpbi1sZWZ0OiBlbShzcGFjZSh4c21hbGwpKTtcclxuICB9XHJcbn1cclxuXHJcbmgzIHtcclxuICBmb250LXNpemU6IGZvbnQtc2l6ZShsYXJnZSk7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luOiBzcGFjZSh4bGFyZ2UpIDAgc3BhY2UobWVkaXVtKTtcclxuICBjb2xvcjogY29sb3IoZGFyaywgZGFya2VzdCk7XHJcblxyXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKHhsYXJnZSk7XHJcbiAgfVxyXG59XHJcblxyXG5zdmcge1xyXG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG5cclxuYSB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG5cclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBjb2xvcjogY29sb3IoZGFyaywgZGFya2VzdCk7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIGJvcmRlci1ib3R0b206IHNvbGlkIHJlbSgycHgpIGNvbG9yKGRhcmspO1xyXG4gIHBhZGRpbmc6IHJlbSgzcHgpIHJlbSg1cHgpO1xyXG5cclxuICAmOmhvdmVyLFxyXG4gICY6Zm9jdXMge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IocHJpbWFyeSwgbGlnaHQpO1xyXG4gIH1cclxuXHJcbiAgJjphY3RpdmUge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IobGlnaHQpO1xyXG4gIH1cclxufVxyXG5cclxucCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiByZW0oNzAwcHgpO1xyXG4gIG1hcmdpbjoge1xyXG4gICAgbGVmdDogYXV0bztcclxuICAgIHJpZ2h0OiBhdXRvO1xyXG4gIH07XHJcblxyXG4gICsgcCB7XHJcbiAgICBtYXJnaW4tdG9wOiBzcGFjZShtZWRpdW0pO1xyXG4gIH1cclxufVxyXG5cclxuc3Ryb25nIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBjb2xvcjogY29sb3IoZGFyaywgZGFya2VzdCk7XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbnNlY3Rpb24ge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmc6IHtcclxuICAgIHRvcDogc3BhY2UobGFyZ2UpO1xyXG4gICAgYm90dG9tOiBzcGFjZShsYXJnZSk7XHJcbiAgfTtcclxufVxyXG5cclxuLndyYXBwZXIge1xyXG4gIG1hcmdpbjogMCBhdXRvO1xyXG4gIHBhZGRpbmc6IHtcclxuICAgIHRvcDogc3BhY2UobWVkaXVtKTtcclxuICAgIGJvdHRvbTogc3BhY2UobWVkaXVtKTtcclxuICB9O1xyXG4gIHdpZHRoOiA4NXZ3O1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgIG1heC13aWR0aDogcmVtKDExMDBweCk7XHJcbiAgfVxyXG59XHJcblxyXG4uaGlnaGxpZ2h0IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW46IHNwYWNlKGxhcmdlKSBhdXRvIHNwYWNlKG1lZGl1bSk7XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG5cclxuICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICBmb250LXNpemU6IGZvbnQtc2l6ZShsYXJnZSk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIEBzZWN0aW9uIEZ1bmN0aW9uc1xyXG5AaW1wb3J0ICcuL3Rvb2xzL2Z1bmN0aW9ucy9tYXAtZGVlcC1nZXQnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL2Z1bmN0aW9ucy9jbGVhbi11bml0JztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvZGVjaW1hbC1mbG9vcic7XHJcbkBpbXBvcnQgJy4vdG9vbHMvZnVuY3Rpb25zL2VtJztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvcmVtJztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvdncnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL2Z1bmN0aW9ucy9wZXJjZW50JztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvY29sdW1uJztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvb2Zmc2V0JztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvc3BhY2UnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL2Z1bmN0aW9ucy9jb2xvcic7XHJcbkBpbXBvcnQgJy4vdG9vbHMvZnVuY3Rpb25zL2xheWVyJztcclxuQGltcG9ydCAnLi90b29scy9mdW5jdGlvbnMvZm9udC13ZWlnaHQnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL2Z1bmN0aW9ucy9mb250LXNpemUnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL2Z1bmN0aW9ucy9zdmctYmFja2dyb3VuZCc7XHJcbkBpbXBvcnQgJy4vdG9vbHMvZnVuY3Rpb25zL29wcG9zaXRlLWRpcmVjdGlvbic7XHJcbkBpbXBvcnQgJy4vdG9vbHMvZnVuY3Rpb25zL3RvLWV2ZW4nO1xyXG5cclxuLy8gQHNlY3Rpb24gTWl4aW5zXHJcbkBpbXBvcnQgJy4vdG9vbHMvbWl4aW5zL2Nzcy1jb250ZW50JztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvaGlkZS1lbGVtZW50JztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvaGlkZS10ZXh0JztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvcmVzcG9uZC10byc7XHJcbkBpbXBvcnQgJy4vdG9vbHMvbWl4aW5zL3Nob3ctZWxlbWVudCc7XHJcbkBpbXBvcnQgJy4vdG9vbHMvbWl4aW5zL3N2Zy1pY29uJztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvdmlldy1tYXJnaW5zJztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvY29sdW1uJztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvYWxsLWlucHV0LXRleHQtbGlrZSc7XHJcbkBpbXBvcnQgJy4vdG9vbHMvbWl4aW5zL3RyaWFuZ2xlJztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvZWxsaXBzaXMnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL21peGlucy9jdXN0b20tcmFkaW8tY2hlY2tib3gnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL21peGlucy9jdXN0b20tcmFkaW8tY2hlY2tib3gtaG92ZXInO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL21peGlucy9jdXN0b20tcmFkaW8tY2hlY2tib3gtY2hlY2tlZCc7XHJcbkBpbXBvcnQgJy4vdG9vbHMvbWl4aW5zL292ZXJsYXktY29uZmlnJztcclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvY2VudGVyLWVsZW1lbnQnO1xyXG5cclxuLy8gQHN1YnNlY3Rpb24gT2JqZWN0cyBbT2JqZXRvc11cclxuQGltcG9ydCAnLi90b29scy9taXhpbnMvb2JqZWN0cy9jbGVhcmZpeCc7XHJcbkBpbXBvcnQgJy4vdG9vbHMvbWl4aW5zL29iamVjdHMvZmxleC1jb250YWluZXInO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL21peGlucy9vYmplY3RzL2hhcy1ibG9ja3MnO1xyXG5AaW1wb3J0ICcuL3Rvb2xzL21peGlucy9vYmplY3RzL2dyaWQtd3JhcHBlcic7XHJcbiIsIi8vLyBNYXAgZGVlcCBnZXRcclxuLy8vIEBncm91cCAgVG9vbHMgW2ZlcnJhbWVudGFzXVxyXG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vXHJcbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIE1hcGFcclxuLy8vIEBwYXJhbSB7QXJnbGlzdH0gJGtleXMgLSBTZXF1ZW5jaWEgZGUgY2hhdmVzXHJcbi8vL1xyXG4vLy8gQHJldHVybiB7Kn0gLSBWYWxvciBkZXNlamFkb1xyXG5AZnVuY3Rpb24gX21hcC1kZWVwLWdldCgkbWFwLCAka2V5cy4uLikge1xyXG4gIEBlYWNoICRrZXkgaW4gJGtleXMge1xyXG4gICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcclxuICB9XHJcbiAgQHJldHVybiAkbWFwO1xyXG59XHJcbiIsIi8vLyBGdW7Dp8OjbyBwYXJhIGxpbXBhciBhIHVuaWRhZGUgZGUgcXVhbHF1ZXIgdmFsb3IgbsO6bWVyaWNvIHRvcm5hbmRvIHBvc3NpdmVsXHJcbi8vLyBmYXplciBjYWxjdWxvc1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy8gQGFjY2VzcyAgcHJpdmF0ZVxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICR2YWx1ZSAtIFZhbG9yIGEgc2VyIGxpbXBvXHJcbi8vL1xyXG4vLy8gQHJldHVybiAge251bWJlcn0gLSBWYWxvciBsaW1wb1xyXG5AZnVuY3Rpb24gX2NsZWFuLXVuaXQoJHZhbHVlKSB7XHJcbiAgQGlmIHR5cGUtb2YoJHZhbHVlKSA9PSAnbnVtYmVyJyB7XHJcbiAgICBAcmV0dXJuICR2YWx1ZSAvICgkdmFsdWUgKiAwICsgMSk7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAd2FybiAnI3skdmFsdWV9IG5hbyBlIHVtIG7Dum1lcm8nO1xyXG4gIH1cclxufVxyXG4iLCIvLy8gQXJyZWRvbmRhIG7Dum1lcm9zIGRlIGFjb3JkbyBjb20gYSBxdWFudGlkYWRlIGRlIGTDrWdpdG9zIGVzcGVjaWZpY2Fkb3NcclxuLy8vIHV0aWxpemFuZG8gYSB0w6ljbmljYSBgZmxvb3JgXHJcbi8vL1xyXG4vLy8gQmFzZWFkbyBuYSBmdW7Dp8OjbyBkZSBUYWtlcnUgU3V6dWtpIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3RlcmtlbC80MzczNDIwXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vL1xyXG4vLy8gQHBhcmFtICB7TnVtYmVyfSAkbnVtYmVyIC0gTsO6bWVybyBhIHNlciBhcnJlZG9uZGFkb1xyXG4vLy8gQHBhcmFtICB7TnVtYmVyfSAkZGlnaXRzIFswXSAtIFF1YW50aWRhZGUgZGUgZMOtZ2l0b3MgZG8gcG9udG8gZmx1dHVhbnRlXHJcbi8vL1xyXG4vLy8gQHJldHVybiB7TnVtYmVyfSBOw7ptZXJvIGFycmVkb25kYWRvXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAgIF9kZWNpbWFsLWZsb29yKDAuMzMzKSAgICA9PiAwXHJcbi8vLyAgICAgX2RlY2ltYWwtZmxvb3IoMC4zMzMsIDEpID0+IDAuM1xyXG4vLy8gICAgIF9kZWNpbWFsLWZsb29yKDAuMzMzLCAyKSA9PiAwLjMzXHJcbi8vLyAgICAgX2RlY2ltYWwtZmxvb3IoMC42NjYpICAgID0+IDFcclxuLy8vICAgICBfZGVjaW1hbC1mbG9vcigwLjY2NiwgMSkgPT4gMC42XHJcbi8vLyAgICAgX2RlY2ltYWwtZmxvb3IoMC42NjYsIDIpID0+IDAuNjZcclxuQGZ1bmN0aW9uIF9kZWNpbWFsLWZsb29yKCRudW1iZXIsICRkaWdpdHM6IDApIHtcclxuICAkbjogMTtcclxuICAkcmVzdWx0OiBudWxsO1xyXG4gICRudW1iZXI6IF9jbGVhbi11bml0KCRudW1iZXIpO1xyXG5cclxuICBAaWYgdHlwZS1vZigkbnVtYmVyKSAhPSBudW1iZXIge1xyXG4gICAgQHdhcm4gJyN7JG51bWJlcn0gcHJlY2lzYSBzZXIgdW0gbnVtZXJvLic7XHJcbiAgICBAcmV0dXJuICRyZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBAaWYgdHlwZS1vZigkZGlnaXRzKSAhPSBudW1iZXIge1xyXG4gICAgQHdhcm4gJyN7JGRpZ2l0c30gcHJlY2lzYSBzZXIgdW0gbnVtZXJvLic7XHJcbiAgICBAcmV0dXJuICRyZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBAaWYgJGRpZ2l0cyA+IDAge1xyXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkZGlnaXRzIHtcclxuICAgICAgJG46ICRuICogMTA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAkcmVzdWx0OiBmbG9vcigkbnVtYmVyICogJG4pIC8gJG47XHJcblxyXG4gIEByZXR1cm4gJHJlc3VsdDtcclxufVxyXG4iLCIvLy8gQ29udmVydGUgcXVhbHF1ZXIgdmFsb3IgcGFyYSBgZW1gLlxyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEByZXR1cm4gIHtudW1iZXJ9IC0gVmFsb3IgY29udmVydGlkbyBleHByZXNzYWRvIGVtIGBlbWBcclxuLy8vXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkdmFsdWUgLSBWYWxvciBhIHNlciBjb252ZXJ0aWRvXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkYmFzZS1zaXplIFskZm9udC1zaXplLWJhc2VdIC0gVGFtYW5obyBkZSBmb250ZSBiYXNlIHVzYWRvXHJcbi8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vIGNhbGN1bG8gZGEgY29udmVyc8Ojb1xyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgLmVsZW1lbnRvIHtcclxuLy8vICAgICBoZWlnaHQ6IGVtKDIwcHgpO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5lbGVtZW50bzIge1xyXG4vLy8gICAgIGhlaWdodDogZW0oMjBweCwgJGJhc2Utc2l6ZTogMTRweCk7XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5lbGVtZW50byB7XHJcbi8vLyAgICAgaGVpZ2h0OiAxLjI1ZW1cclxuLy8vICAgfVxyXG4vLy8gICAuZWxlbWVudG8yIHtcclxuLy8vICAgICBoZWlnaHQ6IDEuNDI4ZW1cclxuLy8vICAgfVxyXG5AZnVuY3Rpb24gZW0oJHZhbHVlLCAkYmFzZS1zaXplOiAkZm9udC1zaXplLWJhc2UpIHtcclxuICAkcmVzdWx0OiBudWxsO1xyXG5cclxuICBAaWYgbm90IHR5cGUtb2YoJHZhbHVlKSA9PSAnbnVtYmVyJyB7XHJcbiAgICBAd2FybiAnI3skdmFsdWV9IHByZWNpc2Egc2VyIHVtIG51bWVybyc7XHJcbiAgfSBAZWxzZSBpZiB1bml0bGVzcygkdmFsdWUpIHtcclxuICAgIEB3YXJuICdPIHZhbG9yICN7JHZhbHVlfSBwcmVjaXNhIHRlciBkZWNsYXJhZG8gbyB0aXBvIGRlIHVuaWRhZGUgKHB4LCBlbSwgJSwgdncsIGV0YyknO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJGNhbGMtcmVzdWx0OiBudWxsO1xyXG5cclxuICAgIEBpZiB1bml0KCR2YWx1ZSkgPT0gJ3B4JyB7XHJcbiAgICAgICRjYWxjLXJlc3VsdDogX2NsZWFuLXVuaXQoJHZhbHVlKSAvIF9jbGVhbi11bml0KCRiYXNlLXNpemUpO1xyXG4gICAgfSBAZWxzZSBpZiB1bml0KCR2YWx1ZSkgPT0gJ3JlbScge1xyXG4gICAgICAkY2FsYy1yZXN1bHQ6IF9jbGVhbi11bml0KCR2YWx1ZSk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJGNhbGMtcmVzdWx0OiBfY2xlYW4tdW5pdCgkdmFsdWUpIC8gMTAwO1xyXG4gICAgfVxyXG5cclxuICAgICRyZXN1bHQ6ICRjYWxjLXJlc3VsdCAqIDFlbTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHJlc3VsdDtcclxufVxyXG4iLCIvLy8gQ29udmVydGUgcXVhbHF1ZXIgdmFsb3IgcGFyYSBgcmVtYC5cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7bnVtYmVyfSAtIFZhbG9yIGNvbnZlcnRpZG8gZXhwcmVzc2FkbyBlbSBgcmVtYFxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgLmVsZW1lbnRvIHtcclxuLy8vICAgICBoZWlnaHQ6IHJlbSgyMHB4KTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmVsZW1lbnRvIHtcclxuLy8vICAgICBoZWlnaHQ6IDEuMjVyZW1cclxuLy8vICAgfVxyXG5AZnVuY3Rpb24gcmVtKCR2YWx1ZSkge1xyXG4gICRyZXN1bHQ6IG51bGw7XHJcblxyXG4gIEBpZiBub3QgdHlwZS1vZigkdmFsdWUpID09ICdudW1iZXInIHtcclxuICAgIEB3YXJuICcjeyR2YWx1ZX0gcHJlY2lzYSBzZXIgdW0gbnVtZXJvJztcclxuICB9IEBlbHNlIGlmIHVuaXRsZXNzKCR2YWx1ZSkge1xyXG4gICAgQHdhcm4gJ08gdmFsb3IgI3skdmFsdWV9IHByZWNpc2EgdGVyIGRlY2xhcmFkbyBvIHRpcG8gZGUgdW5pZGFkZSAocHgsIGVtLCAlLCB2dywgZXRjKSc7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkY2FsYy1yZXN1bHQ6IG51bGw7XHJcblxyXG4gICAgQGlmIHVuaXQoJHZhbHVlKSA9PSAncHgnIHtcclxuICAgICAgJGNhbGMtcmVzdWx0OiAoX2NsZWFuLXVuaXQoJHZhbHVlKSAvIF9jbGVhbi11bml0KCRmb250LXNpemUtYmFzZSkpO1xyXG4gICAgfSBAZWxzZSBpZiB1bml0KCR2YWx1ZSkgPT0gJ3JlbScge1xyXG4gICAgICAkY2FsYy1yZXN1bHQ6IF9jbGVhbi11bml0KCR2YWx1ZSk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJGNhbGMtcmVzdWx0OiBfY2xlYW4tdW5pdCgkdmFsdWUpIC8gMTAwO1xyXG4gICAgfVxyXG5cclxuICAgICRyZXN1bHQ6ICRjYWxjLXJlc3VsdCAqIDFyZW07XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRyZXN1bHQ7XHJcbn1cclxuIiwiLy8vIENvbnZlcnRlIHZhbG9yZXMgZGUgYHB4YCBwYXJhIGB2d2AuIEEgdW5pZGFkZSAocHgpIG7Do28gw6kgb2JyaWdhdMOzcmlhLlxyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICR2YWx1ZSAtIFZhbG9yIGEgc2VyIGNvbnZlcnRpZG9cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7bnVtYmVyfSAtIFZhbG9yIGNvbnZlcnRpZG8gZXhwcmVzc2FkbyBlbSBgdndgXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuZWxlbWVudG8ge1xyXG4vLy8gICAgIG1heC13aWR0aDogdncoMzAwKTtcclxuLy8vICAgfVxyXG4vLy8gICAuZWxlbWVudG8yIHtcclxuLy8vICAgICBtYXgtd2lkdGg6IHZ3KDMwMHB4KTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmVsZW1lbnRvIHtcclxuLy8vICAgICBtYXgtd2lkdGg6IDI5Ljg5dndcclxuLy8vICAgfVxyXG4vLy8gICAuZWxlbWVudG8yIHtcclxuLy8vICAgICBtYXgtd2lkdGg6IDI5Ljg5dndcclxuLy8vICAgfVxyXG5AZnVuY3Rpb24gdncoJHZhbHVlKSB7XHJcbiAgQGlmIHR5cGUtb2YoJHZhbHVlKSA9PSAnbnVtYmVyJyB7XHJcbiAgICAkdmFsdWU6IF9jbGVhbi11bml0KCR2YWx1ZSk7XHJcbiAgICAkdmlldy13aWR0aDogX2NsZWFuLXVuaXQoJHZpZXctd2lkdGgtYmFzZSk7XHJcbiAgICAkY29udmVydGlvbjogX2RlY2ltYWwtZmxvb3IoKCR2YWx1ZSAqIDEwMCkgLyAkdmlldy13aWR0aCwgMik7XHJcblxyXG4gICAgQHJldHVybiAkY29udmVydGlvbiAqIDF2dztcclxuICB9IEBlbHNlIHtcclxuICAgIEB3YXJuICcjeyR2YWx1ZX0gZGV2ZSBzZXIgdW0gbnVtZXJvJztcclxuICB9XHJcbn1cclxuIiwiLy8vIENhbGN1bGEgYSBwZXJjZW50YWdlbSBxdWUgdW0gdmFsb3IgcmVwcmVzZW50YSBjb20gcmVzcGVpdG8gYSBvdXRybyBmYXplbmRvXHJcbi8vLyB1bWEgcmVncmEgZGUgdHLDqnMgc2ltcGxlcy5cclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vL1xyXG4vLy8gQHJldHVybiAge251bWJlcn0gLSBWYWxvciBleHByZXNzYWRvIGVtIHBlcmNlbnRhZ2VtIGAlYFxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICR2YWx1ZSAtIFZhbG9yIGEgc2VyIGNvbnZlcnRpZG9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICRiYXNlIC0gVmFsb3IgYmFzZSBwYXJhIGNhbGN1bG8sIG91IHNlamEsIG8gdmFsb3JcclxuLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZGVudGUgYSAxMDAlXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkZGVjaW1hbHMgWzJdIC0gUXVhbnRpZGFkZSBkZSBkZWNpbWFpcyAocG9udG9zIGZsdXR1YW50ZXMpIG5vXHJcbi8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0b3JubyBkYSBmdW7Dp8Ojb1xyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgLmNsYXNzIHtcclxuLy8vICAgICB3aWR0aDogNTBweDtcclxuLy8vICAgICBiYWNrZ3JvdW5kLXNpemU6IHBlcmNlbnQoMTBweCwgNTBweCk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzLTIge1xyXG4vLy8gICAgIHdpZHRoOiA1ZW07XHJcbi8vLyAgICAgZm9udC1zaXplOiBwZXJjZW50KDIuNTVlbSwgJGJhc2U6IDVlbSk7XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jbGFzcyB7XHJcbi8vLyAgICAgd2lkdGg6IDUwcHg7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1zaXplOiAyMCU7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzLTIge1xyXG4vLy8gICAgIHdpZHRoOiA1ZW07XHJcbi8vLyAgICAgZm9udC1zaXplOiA1MSU7XHJcbi8vLyAgIH1cclxuQGZ1bmN0aW9uIHBlcmNlbnQoJHZhbHVlLCAkYmFzZSwgJGRlY2ltYWxzOiAyKSB7XHJcbiAgJHJlc3VsdDogbnVsbDtcclxuXHJcbiAgQGlmIG5vdCB0eXBlLW9mKCR2YWx1ZSkgPT0gJ251bWJlcicgb3Igbm90IHR5cGUtb2YoJGJhc2UpID09ICdudW1iZXInIHtcclxuICAgIEB3YXJuICcjeyRiYXNlfSBwcmVjaXNhIHNlciBkbyB0aXBvIG51bWVybyc7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkY2FsYy1yZXN1bHQ6IChfY2xlYW4tdW5pdCgkdmFsdWUpICogMTAwKSAvIF9jbGVhbi11bml0KCRiYXNlKTtcclxuXHJcbiAgICAkcmVzdWx0OiBfZGVjaW1hbC1mbG9vcigkY2FsYy1yZXN1bHQsICRkZWNpbWFscykgKiAxJTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHJlc3VsdDtcclxufVxyXG4iLCIvLy8gUmV0b3JuYSBhIGxhcmd1cmEgY2FsY3VsYWRhIGRlIGFjb3JkbyBjb20gdW1hIHF1YW50aWRhZGUgWCBkZSBjb2x1bmFzLlxyXG4vLy9cclxuLy8vIFF1YW5kbyBvIHRpcG8gZG8gZ3JpZCDDqSBmbGV4IGVsZSBhc3N1bWUgcXVlIG8gZWxlbWVudG8gcGFpIHNlcmEgZGl2aWRpZG8gbmFcclxuLy8vIHF1YW50aWRhZGUgZGUgY29sdW5hcyBjb25maWd1cmFkYXMuIEV4OiAxMiBjb2x1bmFzXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEByZXR1cm4gIHtudW1iZXJ9IC0gTGFyZ3VyYSBkZXNlamFkYVxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICRjb2wgLSBOw7ptZXJvIGRlIGNvbHVuYXMgZGVzZWphZGFzXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkdHlwZSBbZmxleC1zaXplXSAtIFRpcG8gZG8gZ3JpZC4gT3DDp8O1ZXM6IGBmbGV4LXNpemVgIGVcclxuLy8vICAgICAgICAgIGBmaXhlZC1zaXplYFxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgLmVsZW1lbnRvLWNvbS1sYXJndXJhLWZpeGEge1xyXG4vLy8gICAgIHdpZHRoOiBjb2x1bW4oNCwgZml4ZWQtc2l6ZSk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmVsZW1lbnRvLWNvbS1sYXJndXJhLWZsZXhpdmVsIHtcclxuLy8vICAgICB3aWR0aDogY29sdW1uKDQpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuZWxlbWVudG8tY29tLWxhcmd1cmEtZml4YSB7XHJcbi8vLyAgICAgd2lkdGg6IGNhbGMoMzMuMzMzMzMzMzN2dyAtIDQwcHgpO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5lbGVtZW50by1jb20tbGFyZ3VyYS1mbGV4aXZlbCB7XHJcbi8vLyAgICAgd2lkdGg6IGNhbGMoMzMuMzMzMzMzMzMlIC0gNDBweCk7XHJcbi8vLyAgIH1cclxuQGZ1bmN0aW9uIGNvbHVtbigkY29sLCAkdHlwZTogJ2ZsZXgtc2l6ZScpIHtcclxuICAkcmVzdWx0OiBudWxsO1xyXG5cclxuICBAaWYgdHlwZS1vZigkY29sKSAhPSBudW1iZXIge1xyXG4gICAgQHdhcm4gJ08gdmFsb3IgZGUgXCIkY29sXCIgcHJlY2lzYSBzZXIgdW0gbnVtZXJvJztcclxuICB9IEBlbHNlIGlmIHR5cGUtb2YoJHR5cGUpICE9IHN0cmluZyB7XHJcbiAgICBAd2FybiAnTyB2YWxvciBkZSBcIiR0eXBlXCIgcHJlY2lzYSBzZXIgdW1hIHN0cmluZyc7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkZ3V0dGVyLXNwYWNlOiByZW0obWFwLWdldCgkZ3JpZCwgc3BhY2VtZW50KSk7XHJcbiAgICAkdG90YWwtd2lkdGg6IF9tYXAtZGVlcC1nZXQoJGdyaWQsICR0eXBlLCBtYXgtd2lkdGgpO1xyXG4gICAgJHRvdGFsLWNvbHVtbnM6IG1hcC1nZXQoJGdyaWQsIGNvbHVtbnMpO1xyXG5cclxuICAgICRvbmUtY29sdW1uLXdpZHRoOiAkdG90YWwtd2lkdGggLyAkdG90YWwtY29sdW1ucztcclxuXHJcbiAgICAkcmVzdWx0OiBjYWxjKCN7JG9uZS1jb2x1bW4td2lkdGggKiAkY29sfSAtICN7JGd1dHRlci1zcGFjZX0pO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkcmVzdWx0O1xyXG59XHJcbiIsIi8vLyBSZXRvcm5hIGEgbGFyZ3VyYSBjYWxjdWxhZGEgZGUgYWNvcmRvIGNvbSB1bWEgcXVhbnRpZGFkZSBYIGRlIGNvbHVuYXMgcGFyYVxyXG4vLy8gc2VyIGFwbGljYWRvIG5hIG1hcmdlbSBkZSBlbGVtZW50b3MvY29tcG9uZW50ZXNcclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7bnVtYmVyfSAtIExhcmd1cmEgZGVzZWphZGFcclxuLy8vXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkY29sIC0gTsO6bWVybyBkZSBjb2x1bmFzIGRlc2VqYWRhc1xyXG4vLy8gQHBhcmFtICAge251bWJlcn0gJHR5cGUgW2ZsZXgtc2l6ZV0gLSBUaXBvIGRvIGdyaWQuIE9ww6fDtWVzOiBgZmxleC1zaXplYCBlXHJcbi8vLyAgICAgICAgICBgZml4ZWQtc2l6ZWBcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5lbGVtZW50by1jb20tYWZhc3RhbWVudG8tZml4YSB7XHJcbi8vLyAgICAgbWFyZ2luLWxlZnQ6IGNvbHVtbig0LCBmaXhlZC1zaXplKTtcclxuLy8vICAgfVxyXG4vLy8gICAuZWxlbWVudG8tY29tLWFmYXN0YW1lbnRvLWZsZXhpdmVsIHtcclxuLy8vICAgICBtYXJnaW4tbGVmdDogY29sdW1uKDQpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuZWxlbWVudG8tY29tLWFmYXN0YW1lbnRvLWZpeGEge1xyXG4vLy8gICAgIG1hcmdpbi1sZWZ0OiBjYWxjKGNhbGMoNC44dncgKyAoKCgxMDB2dyAtIDE3LjZ2dykgLyAxMikgKiA0KSkgKyAxLjZ2dyk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmVsZW1lbnRvLWNvbS1hZmFzdGFtZW50by1mbGV4aXZlbCB7XHJcbi8vLyAgICAgbWFyZ2luLWxlZnQ6IGNhbGMoNC44JSArICgoKDEwMCUgLSAxNy42JSkgLyAxMikgKiA0KSk7XHJcbi8vLyAgIH1cclxuQGZ1bmN0aW9uIG9mZnNldCgkY29sLCAkdHlwZTogJ2ZsZXgtc2l6ZScpIHtcclxuICBAcmV0dXJuIGNhbGMoI3tjb2x1bW4oJGNvbCwgJHR5cGUpfSArICN7bWFwLWdldCgkZ3JpZCwgc3BhY2VtZW50KX0pO1xyXG59XHJcbiIsIi8vLyBSZXRvcm5hIG8gZXNwYcOnYW1lbnRvIGVtIGByZW1gIGRlIGFjb3JkbyBjb20gbyB0YW1hbmhvIGluZm9ybWFkby4gTyB2YWxvclxyXG4vLy8gcmV0b3JuYWRvIHNlcsOhIGV4YXRhbWVudGUgaWd1YWwgYW8gQ1NTLCBvdSBzZWphLCBkZXZlbW9zIGluZm9ybWFyIG9zXHJcbi8vLyBlc3Bhw6dhbWVudG9zIHNlZ3VpbmRvIGEgb3JkZW0gYHRvcGAsIGByaWdodGAsIGBib3R0b21gIGUgYGxlZnRgLlxyXG4vLy9cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7bGlzdCB8IG51bWJlcn0gLSBWYWxvciBjb3JyZXNwb25kZW50ZSDDoCBjaGF2ZSBkZXNlamFkYSBvdSB1bWFcclxuLy8vICAgICAgICAgIGxpc3RhIGNvbSBhcyBjaGF2ZXMgc29saWNpdGFkYXNcclxuLy8vXHJcbi8vLyBAcGFyYW0gICB7YXJnbGlzdH0gJHBvc2l0aW9ucyAtIExpc3RhIGRvcyBlc3Bhw6dhbWVudG9zIGRlc2VqYWRvcy4gUG9kZSBzZXJcclxuLy8vICAgICAgICAgIHVtYSBsaXN0YSBkZSAxIGEgNCBlc3Bhw6dhbWVudG9zXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3NlLXF1YWxxdWVyIHtcclxuLy8vICAgICBwYWRkaW5nOiBzcGFjZShtZWRpdW0pO1xyXG4vLy8gICAgIG1hcmdpbi10b3A6IHNwYWNlKHhzbWFsbCkgKyByZW0oMTBweCk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzZS1xdWFscXVlciB7XHJcbi8vLyAgICAgbWFyZ2luOiBzcGFjZShtZWRpdW0sIGxhcmdlKTtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3NlLXF1YWxxdWVyIHtcclxuLy8vICAgICBwYWRkaW5nOiBzcGFjZShzbWFsbCwgbWVkaXVtLCBsYXJnZSk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzZS1xdWFscXVlciB7XHJcbi8vLyAgICAgbWFyZ2luOiBzcGFjZShzbWFsbCwgbWVkaXVtLCBsYXJnZSwgeGxhcmdlKTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmNsYXNzZS1xdWFscXVlciB7XHJcbi8vLyAgICAgcGFkZGluZzogMS4yNXJlbTtcclxuLy8vICAgICBtYXJnaW4tdG9wOiAwLjYyNXJlbTtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3NlLXF1YWxxdWVyIHtcclxuLy8vICAgICBtYXJnaW46IDEuMjVyZW0gMS44NzVyZW07XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzZS1xdWFscXVlciB7XHJcbi8vLyAgICAgcGFkZGluZzogMC42MjVyZW0gMS4yNXJlbSAxLjg3NXJlbTtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3NlLXF1YWxxdWVyIHtcclxuLy8vICAgICBtYXJnaW46IDAuNjI1cmVtIDEuMjVyZW0gMS44NzVyZW0gMy4xMjVyZW07XHJcbi8vLyAgIH1cclxuQGZ1bmN0aW9uIHNwYWNlKCRwb3NpdGlvbnMuLi4pIHtcclxuICAkcmVzdWx0OiBudWxsO1xyXG5cclxuICBAaWYgbm90IHZhcmlhYmxlLWV4aXN0cyhzcGFjZXMpIHtcclxuICAgIEB3YXJuICdPIG1hcGEgYCRzcGFjZXNgIG5hbyBleGlzdGUuIFBvciBmYXZvciBvIGNyaWUgZSB0ZW50ZSBub3ZhbWVudGUhJztcclxuICB9IEBlbHNlIGlmIG5vdCBmdW5jdGlvbi1leGlzdHMocmVtKSB7XHJcbiAgICBAd2FybiAnQSBmdW5jYW8gYHJlbWAgbmFvIGZvaSBlbmNvbnRyYWRhISc7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkcWRlOiBsZW5ndGgoJHBvc2l0aW9ucyk7XHJcblxyXG4gICAgQGlmICRxZGUgPCAxIG9yICRxZGUgPiA0IHtcclxuICAgICAgQHdhcm4gJ0luZm9ybWUgdW1hIHF1YW50aWRhZGUgZW50cmUgMSBlIDQgZXNwYWNhbWVudG9zISc7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkcWRlIHtcclxuICAgICAgICAkc2l6ZTogbnRoKCRwb3NpdGlvbnMsICRpKTtcclxuXHJcbiAgICAgICAgQGlmIG5vdCBtYXAtaGFzLWtleSgkc3BhY2VzLCAkc2l6ZSkge1xyXG4gICAgICAgICAgQGlmICRzaXplID09ICdncmlkJyB7XHJcbiAgICAgICAgICAgIEBpZiBub3QgdmFyaWFibGUtZXhpc3RzKGdyaWQpIHtcclxuICAgICAgICAgICAgICBAd2FybiAnTyBtYXBhIGAkZ3JpZGAgbmFvIGV4aXN0ZS4gUG9yIGZhdm9yIG8gY3JpZSBlIHRlbnRlIG5vdmFtZW50ZSEnO1xyXG4gICAgICAgICAgICB9IEBlbHNlIHtcclxuICAgICAgICAgICAgICAkcmVzdWx0OiByZW0obWFwLWdldCgkZ3JpZCwgc3BhY2VtZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICAgICBAd2FybiAnQSBjaGF2ZSBcIiN7JHNpemV9XCIgbmFvIGV4aXN0ZSBubyBtYXBhIGAkc3BhY2VzYCc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBAZWxzZSB7XHJcbiAgICAgICAgICAkdmFsb3I6IHJlbShtYXAtZ2V0KCRzcGFjZXMsICRzaXplKSk7XHJcblxyXG4gICAgICAgICAgQGlmICRxZGUgPT0gMSB7XHJcbiAgICAgICAgICAgICRyZXN1bHQ6ICR2YWxvcjtcclxuICAgICAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgJHZhbG9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHJlc3VsdDtcclxufVxyXG4iLCIvLy8gUmV0b3JuYSBhIGNvciBkZXNlamFkYSBkZSBhY29yZG8gY29tIG8gY29uZmlndXJhZG8gbm9zIG1hcGFzIGAkYnJhbmQtY29sb3JzYFxyXG4vLy8gZSBgJHVpLWNvbG9yc2BcclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7Y29sb3J9IC0gQ29yIGRlc2VqYWRhXHJcbi8vL1xyXG4vLy8gQHBhcmFtICAge3N0cmluZ30gJGNvbG9yIC0gTm9tZSBkYSBjaGF2ZSBkYSBjb3IgZGVzZWphZGFcclxuLy8vIEBwYXJhbSAgIHtzdHJpbmd9ICR2YXJpYXRpb24gLSBOb21lIGRhIGNoYXZlIGRhIHZhcmlhw6fDo28gZGEgY29yIGRlc2VqYWRhXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuZWxlbWVudG8ge1xyXG4vLy8gICAgIGJhY2tncm91bmQ6IGNvbG9yKHByaW1hcnkpO1xyXG4vLy8gICAgIGNvbG9yOiBjb2xvcihzZWNvbmRhcnkpO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5lbGVtZW50bzIge1xyXG4vLy8gICAgIGJhY2tncm91bmQ6IGNvbG9yKHByaW1hcnksIGxpZ2h0KTtcclxuLy8vICAgICBjb2xvcjogY29sb3IoZGFyaywgbGlnaHQpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuZWxlbWVudG8ge1xyXG4vLy8gICAgIGJhY2tncm91bmQ6ICMwMDA7XHJcbi8vLyAgICAgY29sb3I6ICNmMGY7XHJcbi8vLyAgIH1cclxuLy8vICAgLmVsZW1lbnRvMiB7XHJcbi8vLyAgICAgYmFja2dyb3VuZDogI2MwYzBjMDtcclxuLy8vICAgICBjb2xvcjogIzk5OTtcclxuLy8vICAgfVxyXG5AZnVuY3Rpb24gY29sb3IoJGNvbG9yLCAkdmFyaWF0aW9uOiBudWxsKSB7XHJcbiAgQGlmIHZhcmlhYmxlLWV4aXN0cyhicmFuZC1jb2xvcnMpIGFuZCB2YXJpYWJsZS1leGlzdHModWktY29sb3JzKSB7XHJcbiAgICAkYWxsLWNvbG9yczogbWFwLW1lcmdlKCRicmFuZC1jb2xvcnMsICR1aS1jb2xvcnMpO1xyXG5cclxuICAgIEBpZiBtYXAtaGFzLWtleSgkYWxsLWNvbG9ycywgJGNvbG9yKSB7XHJcbiAgICAgICR0eXBlOiBtYXAtZ2V0KCRhbGwtY29sb3JzLCAkY29sb3IpO1xyXG5cclxuICAgICAgQGlmICR2YXJpYXRpb24gPT0gbnVsbCB7XHJcbiAgICAgICAgQGlmIHR5cGUtb2YoJHR5cGUpID09IG1hcCB7XHJcbiAgICAgICAgICBAcmV0dXJuIF9tYXAtZGVlcC1nZXQoJGFsbC1jb2xvcnMsICRjb2xvciwgJ2Jhc2UnKTtcclxuICAgICAgICB9IEBlbHNlIHtcclxuICAgICAgICAgIEByZXR1cm4gbWFwLWdldCgkYWxsLWNvbG9ycywgJGNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgIEByZXR1cm4gX21hcC1kZWVwLWdldCgkYWxsLWNvbG9ycywgJGNvbG9yLCAkdmFyaWF0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEB3YXJuICdBIGNoYXZlIFwiI3skY29sb3J9XCIgbmFvIGV4aXN0ZSBubyBtYXBhIFwiJGJyYW5kLWNvbG9yc1wiIG91IFwiJHVpLWNvbG9yc1wiJztcclxuICAgIH1cclxuICB9IEBlbHNlIHtcclxuICAgIEB3YXJuICdPcyBtYXBhcyBcIiRicmFuZC1jb2xvcnNcIiBlIFwiJHVpLWNvbG9yc1wiIG5hbyBleGlzdGVtLiBQb3IgZmF2b3IgdmVyaWZpcXVlIGUgdGVudGUgbm92YW1lbnRlISc7XHJcbiAgfVxyXG59XHJcbiIsIi8vLyBSZXRvcm5hIG8gdmFsb3IgY29ycmVzcG9uZGVudGUgw6AgY2FtYWRhIG5vIG1hcGEgYCR6LWluZGV4YFxyXG4vLy8gQGdyb3VwICAgVG9vbHMgW2ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEByZXR1cm4gIHtudW1iZXJ9IC0gVmFsb3IgZGVzZWphZG9cclxuLy8vXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkbGF5ZXIta2V5IC0gTm9tZSBkYSBjYW1hZGFcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5jbGFzc2UtMSB7XHJcbi8vLyAgICAgei1pbmRleDogbGF5ZXIobG93KTtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3NlLTIge1xyXG4vLy8gICAgIHotaW5kZXg6IGxheWVyKGxvdykgKyAzO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuY2xhc3NlLTEge1xyXG4vLy8gICAgIHotaW5kZXg6IC0xO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzc2UtMiB7XHJcbi8vLyAgICAgei1pbmRleDogMjtcclxuLy8vICAgfVxyXG5AZnVuY3Rpb24gbGF5ZXIoJGxheWVyLWtleSkge1xyXG4gIEBpZiBub3QgdmFyaWFibGUtZXhpc3RzKHotaW5kZXgpIHtcclxuICAgIEB3YXJuICdPIG1hcGEgZGUgY2FtYWRhcyBgJHotaW5kZXhgIG5hbyBleGlzdGUhJztcclxuICAgIEByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gbWFwLWdldCgkei1pbmRleCwgJGxheWVyLWtleSk7XHJcbn1cclxuIiwiLy8vIFJldG9ybmEgbyB2YWxvciBjb3JyZXNwb25kZW50ZSBhbyBwZXNvIGRhIGZvbnRlIG5vcyBtYXBhcyBgJHVpLWZvbnRzYCBlXHJcbi8vLyBgJGJyYW5kLWZvbnRzYFxyXG4vLy9cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7bnVtYmVyfSAtIFZhbG9yIGRlc2VqYWRvXHJcbi8vL1xyXG4vLy8gQHBhcmFtICAge251bWJlcn0gJGtleS1uYW1lIC0gTm9tZSBkbyBwZXNvIGRhIGZvbnRlXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3NlLXF1YWxxdWVyIHtcclxuLy8vICAgICBmb250LXdlaWdodDogZm9udC13ZWlnaHQoeGJvbGQpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuY2xhc3NlLXF1YWxxdWVyIHtcclxuLy8vICAgICBmb250LXdlaWdodDogODAwO1xyXG4vLy8gICB9XHJcbkBmdW5jdGlvbiBmb250LXdlaWdodCgka2V5LW5hbWUpIHtcclxuICBAcmV0dXJuIF9tYXAtZGVlcC1nZXQoJGZvbnRzLCAjeyRrZXktbmFtZX0sIHdlaWdodCk7XHJcbn1cclxuIiwiLy8vIFJldG9ybmEgbyB2YWxvciBjb3JyZXNwb25kZW50ZSBhbyB0YW1hbmhvIGRhIGZvbnRlIG5vcyBtYXBhcyBgJGZvbnQtc2l6ZXNgXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEByZXR1cm4gIHtudW1iZXJ9IC0gVmFsb3IgZGVzZWphZG9cclxuLy8vXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAka2V5LW5hbWUgLSBOb21lIGRvIHRhbWFuaG8gZGEgZm9udGUgZGVzZWphZGFcclxuLy8vIEBwYXJhbSAgIHtib29sfSAkaXMtYWJzb2x1dGUgW2ZhbHNlXSAtIGluZGljYSBzZSBhIGZvbnRlIHNlcsOhIGV4cHJlc3NhZGEgZW1cclxuLy8vICAgICAgICAgIHVuaWRhZGUgYWJzb2x1dGFcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5jbGFzc2UtcXVhbHF1ZXIge1xyXG4vLy8gICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKHNtYWxsKTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmNsYXNzZS1xdWFscXVlciB7XHJcbi8vLyAgICAgZm9udC1zaXplOiAuNzVyZW07XHJcbi8vLyAgIH1cclxuQGZ1bmN0aW9uIGZvbnQtc2l6ZSgka2V5LW5hbWUsICRpcy1hYnNvbHV0ZTogZmFsc2UpIHtcclxuICBAaWYgJGlzLWFic29sdXRlIHtcclxuICAgIEByZXR1cm4gX21hcC1kZWVwLWdldCgkZm9udC1zaXplcywgI3ska2V5LW5hbWV9KTtcclxuICB9IEBlbHNlIHtcclxuICAgIEByZXR1cm4gcmVtKF9tYXAtZGVlcC1nZXQoJGZvbnQtc2l6ZXMsICN7JGtleS1uYW1lfSkpO1xyXG4gIH1cclxufVxyXG4iLCIvLy8gRnVuw6fDo28gcGFyYSBtb250YXIgYSB1cmwgZGUgdW0gYmFja2dyb3VuZCBzdmcuXHJcbi8vL1xyXG4vLy8gT3MgcGFyw6FtZXRyb3MgZGUgbGFyZ3VyYSBlIGFsdHVyYSwgc2Vyw6NvIGNvbnZlcnRpZG9zIGVtIG7Dum1lcm9zIGludGVpcm9zLFxyXG4vLy8gY2FzbyBzZWphIHBhc3NhZG8gdW0gdmFsb3IgY29tIHBvbnRvIGZsdXR1YW50ZSAoZGVjaW1haXMpXHJcbi8vL1xyXG4vLy8gUGFyYSBtZWxob3Igb3JnYW5pemHDp8OjbywgYWRpY2lvbmFyIG8gY29udGV1ZG8gZG8gc3ZnIGVtIHVtYSBjb25zdGFudGUgZ2xvYmFsLlxyXG4vLy8gRXg6ICRzdmctZXJyb3ItaWNvbjogJzxwYXRoIGQ9XCIgTSAwLjY5NiAyLjU2NyBMIDMuMTI5IDUgTCAwLjY5NiA3LjQzMyBDIDAuMDEgOC4xMTkgLTAuMzAyIDguOTMgMC4zODQgOS42MTYgQyAxLjA3IDEwLjMwMiAxLjg4MSA5Ljk5IDIuNTY3IDkuMzA0IEwgNSA2Ljg3MSBMIDcuNDMzIDkuMzA0IEMgOC4xMTkgOS45OSA4LjkzIDEwLjMwMiA5LjYxNiA5LjYxNiBDIDEwLjMwMiA4LjkzIDkuOTkgOC4xMTkgOS4zMDQgNy40MzMgTCA2Ljg3MSA1IEwgOS4zMDQgMi41NjcgQyA5Ljk5IDEuODgxIDEwLjMwMiAxLjA3MSA5LjYxNiAwLjM4NCBDIDguOTMgLTAuMzAyIDguMTE5IDAuMDEgNy40MzMgMC42OTYgTCA1IDMuMTI5IEwgMi41NjcgMC42OTYgQyAxLjg4MSAwLjAxIDEuMDcgLTAuMzAyIDAuMzg0IDAuMzg0IEMgLTAuMzAyIDEuMDcxIDAuMDEgMS44ODEgMC42OTYgMi41NjcgWiBcIi8+JztcclxuLy8vXHJcbi8vLyAqKk9ic2VydmHDp8OjbyBpbXBvcnRhbnRlOioqIEVzdGEgZnVuw6fDo28gZGV2ZSBzZXIgdXRpbGl6YWRhIGFwZW5hcyBwYXJhXHJcbi8vLyBiYWNrZ3JvdW5kcyBzdmcgZGUgKipjb3Igw7puaWNhKiohXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy8gQGFjY2VzcyAgcHJpdmF0ZVxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtzdHJpbmd9ICRzdmctY29udGVudCAtIENvbnRlw7pkbyBkYSB0YWcgYHN2Z2AgZGVwb2lzIGRlIGxpbXBhZGFcclxuLy8vIEBwYXJhbSAgIHtjb2xvcn0gJHN2Zy1jb2xvciAtIENvciBkZSBwcmVlbmNoaW1lbnRvIGRvIGRlc2VuaG8gdG9kb1xyXG4vLy8gQHBhcmFtICAge251bWJlcn0gJHdpZHRoIFsyNF0gLSBMYXJndXJhIGRvIHN2Zy4gRGV2ZSBzZXIgbsO6bWVybyBpbnRlaXJvXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkaGVpZ2h0IFsyNF0gLSBBbHR1cmEgZG8gc3ZnLiBEZXZlIHNlciBuw7ptZXJvIGludGVpcm9cclxuLy8vIEBwYXJhbSAgIHtjb2xvcn0gJHN2Zy1zdHJva2UgW251bGxdIC0gQ29yIGRlIHByZWVuY2hpbWVudG8gZGEgYm9yZGFcclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7c3RyaW5nfSAtIFVSTCBwcm9udGEgY29tIGEgdGFnIHN2ZyBwYXJhIGFwbGljYcOnw6NvIGNvbW8gYmFja2dyb3VuZFxyXG5AZnVuY3Rpb24gX3N2Zy1iYWNrZ3JvdW5kKFxyXG4gICRzdmctY29udGVudCxcclxuICAkc3ZnLWNvbG9yLFxyXG4gICR3aWR0aDogJGljb24tc2l6ZS1iYXNlLFxyXG4gICRoZWlnaHQ6ICRpY29uLXNpemUtYmFzZSxcclxuICAkc3ZnLXN0cm9rZTogbnVsbFxyXG4pIHtcclxuICAkd2lkdGg6IF9jbGVhbi11bml0KHJvdW5kKCR3aWR0aCkpO1xyXG4gICRoZWlnaHQ6IF9jbGVhbi11bml0KHJvdW5kKCRoZWlnaHQpKTtcclxuXHJcbiAgQGlmICRzdmctY29sb3IgIT0gbm9uZSBhbmQgJHN2Zy1jb2xvciAhPSB0cmFuc3BhcmVudCB7XHJcbiAgICAvLyDDqSBuZWNlc3PDoXJpbyBwYXJhIG8gRkYgMzEgPVtcclxuICAgICRzdmctY29sb3I6ICdyZ2IoI3tyZWQoJHN2Zy1jb2xvciksIGdyZWVuKCRzdmctY29sb3IpLCBibHVlKCRzdmctY29sb3IpfSknO1xyXG4gIH1cclxuXHJcbiAgQGlmICRzdmctc3Ryb2tlICE9IG51bGwge1xyXG4gICAgJHN2Zy1zdHJva2U6ICdzdHJva2U9XCJyZ2IoI3tyZWQoJHN2Zy1zdHJva2UpLCBncmVlbigkc3ZnLXN0cm9rZSksIGJsdWUoJHN2Zy1zdHJva2UpfSlcIic7XHJcbiAgfVxyXG5cclxuICAkc3ZnLXRhZy1pbml0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgd2lkdGg9XCIjeyR3aWR0aH1cIiBoZWlnaHQ9XCIjeyRoZWlnaHR9XCIgZmlsbD1cIiN7JHN2Zy1jb2xvcn1cIiAjeyRzdmctc3Ryb2tlfT4nO1xyXG4gICRzdmctdGFnLWVuZDogJzwvc3ZnPic7XHJcblxyXG4gIEByZXR1cm4gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCN7JHN2Zy10YWctaW5pdH0jeyRzdmctY29udGVudH0jeyRzdmctdGFnLWVuZH0nO1xyXG59XHJcbiIsIi8vLyBSZXRvcm5hIGEgZGlyZcOnw6NvIG9wb3N0YSBkZSBjYWRhIGRpcmXDp8OjbyBpbmZvcm1hZGEgZW0gdW1hIGxpc3RhXHJcbi8vLyBAYXV0aG9yIEh1Z28gR2lyYXVkZWxcclxuLy8vIEBzb3VyY2UgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9zYXNzL29wcG9zaXRlLWRpcmVjdGlvbi1mdW5jdGlvbi9cclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vLyBAYWNjZXNzICBwcml2YXRlXHJcbi8vL1xyXG4vLy8gQHBhcmFtIHtMaXN0fSAkZGlyZWN0aW9ucyAtIExpc3RhIGRlIGRpcmXDp8O1ZXNcclxuLy8vXHJcbi8vLyBAcmV0dXJuIHtMaXN0fSAtIExpc3RhIGRhcyBkaXJlw6fDtWVzIG9wb3N0YXMgZW5jb250cmFkYXNcclxuQGZ1bmN0aW9uIF9vcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbnMpIHtcclxuICAkb3Bwb3NpdGUtZGlyZWN0aW9uczogKCk7XHJcbiAgJGRpcmVjdGlvbi1tYXA6IChcclxuICAgICd0b3AnOiAgICAnYm90dG9tJyxcclxuICAgICdyaWdodCc6ICAnbGVmdCcsXHJcbiAgICAnYm90dG9tJzogJ3RvcCcsXHJcbiAgICAnbGVmdCc6ICAgJ3JpZ2h0JyxcclxuICAgICdjZW50ZXInOiAnY2VudGVyJyxcclxuICAgICdsdHInOiAgICAncnRsJyxcclxuICAgICdydGwnOiAgICAnbHRyJ1xyXG4gICk7XHJcblxyXG4gIEBlYWNoICRkaXJlY3Rpb24gaW4gJGRpcmVjdGlvbnMge1xyXG4gICAgJGRpcmVjdGlvbjogdG8tbG93ZXItY2FzZSgkZGlyZWN0aW9uKTtcclxuXHJcbiAgICBAaWYgbWFwLWhhcy1rZXkoJGRpcmVjdGlvbi1tYXAsICRkaXJlY3Rpb24pIHtcclxuICAgICAgJG9wcG9zaXRlLWRpcmVjdGlvbnM6IGFwcGVuZCgkb3Bwb3NpdGUtZGlyZWN0aW9ucywgdW5xdW90ZShtYXAtZ2V0KCRkaXJlY3Rpb24tbWFwLCAkZGlyZWN0aW9uKSkpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEB3YXJuICdOZW5odW1hIHBvc2ljYW8gb3Bvc3RhIGZvaSBlbmNvbnRyYWRhIHBhcmEgYCN7JGRpcmVjdGlvbn1gJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gJG9wcG9zaXRlLWRpcmVjdGlvbnM7XHJcbn1cclxuIiwiLy8vIENvbnZlcnRlIHVtIG7Dum1lcm8gw61tcGFyIHBhcmEgbyBwcsOzeGltbyBuw7ptZXJvIHBhclxyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICRudW1iZXIgLSBOw7ptZXJvIGEgc2VyIHZlcmlmaWNhZG9cclxuLy8vXHJcbi8vLyBAcmV0dXJuICB7bnVtYmVyfSAtIE7Dum1lcm8gcGFyXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuZWxlbWVudG8ge1xyXG4vLy8gICAgIHdpZHRoOiBfdG8tZXZlbigyN3B4KTtcclxuLy8vICAgfVxyXG4vLy8gICAuZWxlbWVudG8yIHtcclxuLy8vICAgICB3aWR0aDogX3RvLWV2ZW4oMzAwcHgpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuZWxlbWVudG8ge1xyXG4vLy8gICAgIHdpZHRoOiAyOHB4XHJcbi8vLyAgIH1cclxuLy8vICAgLmVsZW1lbnRvMiB7XHJcbi8vLyAgICAgd2lkdGg6IDMwMHB4XHJcbi8vLyAgIH1cclxuQGZ1bmN0aW9uIF90by1ldmVuKCRudW1iZXIpIHtcclxuICAkbnVtYmVyOiBjZWlsKCRudW1iZXIpO1xyXG4gICRpcy1vZGQ6ICgkbnVtYmVyICUgMikgIT0gMDtcclxuXHJcbiAgQGlmICRpcy1vZGQge1xyXG4gICAgJG51bWJlcjogJG51bWJlciArIDE7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRudW1iZXI7XHJcbn1cclxuIiwiLy8vIE1peGluIHF1ZSBjcmlhIG8gY29udGXDumRvIHZhemlvIHBhcmEgcHNldWRvLWVsZW1lbnRvcyBgOjphZnRlcmAgZSBgOjpiZWZvcmVgXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIG5lY2Vzc8OhcmlhcyBwYXJhIHRlclxyXG4vLy8gICAgICAgICAgdW0gcHNldWRvLWVsZW1lbnRvIGNvbSBvdSBzZW0gdGFtYW5obyBlc3BlY8OtZmljb1xyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICR3aWR0aCBbbnVsbF0gLSBMYXJndXJhIGRvIHBzZXVkby1lbGVtZW50b1xyXG4vLy8gQHBhcmFtICAge251bWJlcn0gJGhlaWdodCBbbnVsbF0gLSBBbHR1cmEgZG8gcHNldWRvLWVsZW1lbnRvXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3MxIHtcclxuLy8vICAgICBAaW5jbHVkZSBjc3MtY29udGVudCgxMHB4LCByZW0oMzBweCkpO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzczIge1xyXG4vLy8gICAgIEBpbmNsdWRlIGNzcy1jb250ZW50KHJlbSgzMHB4KSk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzMyB7XHJcbi8vLyAgICAgQGluY2x1ZGUgY3NzLWNvbnRlbnQ7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzNCB7XHJcbi8vLyAgICAgQGluY2x1ZGUgY3NzLWNvbnRlbnQoJGhlaWdodDogcmVtKDMwcHgpKTtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3M1IHtcclxuLy8vICAgICBAaW5jbHVkZSBjc3MtY29udGVudCgkd2lkdGg6IDMwcHgpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jbGFzczEge1xyXG4vLy8gICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy8vICAgICB3aWR0aDogMTBweDtcclxuLy8vICAgICBoZWlnaHQ6IDEuODc1cmVtO1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzczIge1xyXG4vLy8gICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy8vICAgICB3aWR0aDogMS44NzVyZW07XHJcbi8vLyAgICAgaGVpZ2h0OiAxLjg3NXJlbTtcclxuLy8vICAgICBjb250ZW50OiAnJztcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3MzIHtcclxuLy8vICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vLyAgICAgY29udGVudDogJyc7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzNCB7XHJcbi8vLyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLy8gICAgIGhlaWdodDogMS44NzVyZW07XHJcbi8vLyAgICAgY29udGVudDogJyc7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzNSB7XHJcbi8vLyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLy8gICAgIHdpZHRoOiAzMHB4O1xyXG4vLy8gICAgIGhlaWdodDogMzBweDtcclxuLy8vICAgICBjb250ZW50OiAnJztcclxuLy8vICAgfVxyXG5AbWl4aW4gY3NzLWNvbnRlbnQoJHdpZHRoOiBudWxsLCAkaGVpZ2h0OiBudWxsKSB7XHJcbiAgY29udGVudDogJyc7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG5cclxuICB3aWR0aDogJHdpZHRoO1xyXG4gIGhlaWdodDogaWYoJGhlaWdodCA9PSBudWxsLCAkd2lkdGgsICRoZWlnaHQpO1xyXG59XHJcbiIsIi8vLyBNaXhpbiBxdWUgc29tZSBjb20gdW0gZWxlbWVudG8gc2VtIGRhciBgZGlzcGxheTogbm9uZWAgcHJhIGVsZSBmaWNhclxyXG4vLy8gYWNlc3PDrXZlbCBhb3MgbGVpdG9yZXMgZGUgdGVsYVxyXG4vLy9cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vIEBvdXRwdXQgIFF1YW5kbyBjb21waWxhZG8gY29sb2NhIHRvZGFzIGFzIHByb3ByaWVkYWRlcyBkZWZpbmlkYXNcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5jbGFzczEge1xyXG4vLy8gICAgIEBpbmNsdWRlIGhpZGUtZWxlbWVudDtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIGNzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuY2xhc3MxIHtcclxuLy8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vLyAgICAgd2lkdGg6IDFweDtcclxuLy8vICAgICBoZWlnaHQ6IDFweDtcclxuLy8vICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4vLy8gICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcclxuLy8vICAgICBib3JkZXI6IDA7XHJcbi8vLyAgIH1cclxuQG1peGluIGhpZGUtZWxlbWVudCB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHdpZHRoOiAxcHg7XHJcbiAgaGVpZ2h0OiAxcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBjbGlwOiByZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7XHJcbiAgYm9yZGVyOiAwO1xyXG59XHJcbiIsIi8vLyBNaXhpbiBxdWUgc29tZSBjb20gbyB0ZXh0byBkZSB1bSBlbGVtZW50byBmYXplbmRvIGVsZSBzZXIgYWNlc3PDrXZlbCBhb3NcclxuLy8vIGxlaXRvcmVzIGRlIHRlbGFcclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vLyBAb3V0cHV0ICBRdWFuZG8gY29tcGlsYWRvIGNvbG9jYSB0b2RhcyBhcyBwcm9wcmllZGFkZXMgZGVmaW5pZGFzXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3MxIHtcclxuLy8vICAgICBAaW5jbHVkZSBoaWRlLXRleHQ7XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmNsYXNzMSB7XHJcbi8vLyAgICAgdGV4dC1pbmRlbnQ6IDIwMCU7XHJcbi8vLyAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuLy8vICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBoaWRlLXRleHQge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcblxyXG4gIHRleHQtaW5kZW50OiAyMDAlO1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuIiwiLy8vIE1peGluIHBhcmEgZmFjaWxpdGFyIGEgY3JpYcOnw6NvIGRlIG1lZGlhIHF1ZXJpZXMuIMOJIGJhc2VhZG8gbm8gY29uY2VpdG8gZG9cclxuLy8vICoqY29udGXDumRvIHJlc3BvbnNpdm8qKiBlICptb2JpbGUgZmlyc3QqXHJcbi8vLyBAbGluayAgICBodHRwOi8vc2VyZ2lvbG9wZXMub3JnL21lZGlhLXF1ZXJpZXMtem9vbS9cclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vL1xyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIGluY2x1w61kYXMgZGVudHJvIGRvXHJcbi8vLyAgICAgICAgICBtaXhpblxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtzdHJpbmd9ICRicmVha3BvaW50IC0gTm9tZSBkYSBjaGF2ZSBkbyB0YW1hbmhvIGRlc2VqYWRvXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbi8vLyAgICAgYmFja2dyb3VuZDogYmx1ZTtcclxuLy8vICAgICB3aWR0aDogNTBweDtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIGNzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAgQG1lZGlhIChtaW4td2lkdGg6IDY4ZW0pIHtcclxuLy8vICAgICAgYm9keSB7XHJcbi8vLyAgICAgICAgYmFja2dyb3VuZDogYmx1ZTtcclxuLy8vICAgICAgICB3aWR0aDogNTBweDtcclxuLy8vICAgICAgfVxyXG4vLy8gICAgfVxyXG5AbWl4aW4gcmVzcG9uZC10bygkYnJlYWtwb2ludCkge1xyXG4gIEBpZiB2YXJpYWJsZS1leGlzdHMoYnJlYWtwb2ludHMpIHtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiBlbShtYXAtZ2V0KCRicmVha3BvaW50cywgJGJyZWFrcG9pbnQpKSkge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxuICB9IEBlbHNlIHtcclxuICAgIEB3YXJuICdJbmZlbGl6bWVudGUgbyBtYXBhIFwiJGJyZWFrcG9pbnRzXCIgbmFvIGV4aXN0ZS4nO1xyXG4gIH1cclxufVxyXG4iLCIvLy8gTWl4aW4gcXVlIGZheiBhcGFyZWNlciB1bSBlbGVtZW50byBlc2NvbmRpZG8gdXRpbGl6YW5kbyBvIG1peGluXHJcbi8vLyBgaGlkZS1lbGVtZW50YCBhb3MgbGVpdG9yZXMgZGUgdGVsYVxyXG4vLy9cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vIEBvdXRwdXQgIFF1YW5kbyBjb21waWxhZG8gY29sb2NhIHRvZGFzIGFzIHByb3ByaWVkYWRlcyBkZWZpbmlkYXNcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5jbGFzczEge1xyXG4vLy8gICAgIEBpbmNsdWRlIHNob3ctZWxlbWVudDtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIGNzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuY2xhc3MxIHtcclxuLy8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vLyAgICAgd2lkdGg6IDFweDtcclxuLy8vICAgICBoZWlnaHQ6IDFweDtcclxuLy8vICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4vLy8gICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcclxuLy8vICAgICBib3JkZXI6IDA7XHJcbi8vLyAgIH1cclxuQG1peGluIHNob3ctZWxlbWVudCB7XHJcbiAgcG9zaXRpb246IGluaXRpYWw7XHJcbiAgd2lkdGg6IGluaXRpYWw7XHJcbiAgaGVpZ2h0OiBpbml0aWFsO1xyXG4gIG92ZXJmbG93OiBpbml0aWFsO1xyXG4gIGNsaXA6IGluaXRpYWw7XHJcbiAgYm9yZGVyOiBpbml0aWFsO1xyXG59XHJcbiIsIi8vLyBNaXhpbiBwYXJhIGZhY2lsaXRhciBhIGluY2x1c8OjbyBkZSBpbWFnZW5zIHV0aWxpemFuZG8gbyBzdmctc3ByaXRlIGNvbW9cclxuLy8vIGJhY2tncm91bmRcclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vL1xyXG4vLy8gQHBhcmFtICAge3N0cmluZ30gJHN2Zy1pZCAtIE5vbWUgZG8gYXJxdWl2byBvcmlnaW5hbCBkbyBpY29uZVxyXG4vLy8gQHBhcmFtICAge251bWJlcn0gJHNpemUgLSBUYW1hbmhvIGRvIGNhbnZhcyBkbyBpY29uZVxyXG4vLy8gQHBhcmFtICAge2NvbG9yfSAkY29sb3IgW2NvbG9yKGRhcmspXSAtIENvciBkZSBwcmVlbmNoaW1lbnRvIGRvIMOtY29uZS5cclxuLy8vICAgICAgICAgIFRhbWLDqW0gcG9kZSBzZXIgYHRyYW5zcGFyZW50YCBvdSBgbm9uZWBcclxuLy8vIEBwYXJhbSAgIHtjb2xvcn0gJHN0cm9rZSBbbnVsbF0gLSBDb3IgZGUgcHJlZW5jaGltZW50byBkYSBib3JkYSBkbyDDrWNvbmVcclxuLy8vXHJcbi8vLyBAb3V0cHV0ICBRdWFuZG8gY29tcGlsYWRvIGNvbG9jYSB0b2RhcyBhcyBwcm9wcmllZGFkZXMgZGVmaW5pZGFzXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3MxIHtcclxuLy8vICAgICAmOjpiZWZvcmUge1xyXG4vLy8gICAgICAgQGluY2x1ZGUgc3ZnLWljb24oXHJcbi8vLyAgICAgICAgICRzdmc6ICRzdmctc2VsZWN0LWFycm93LFxyXG4vLy8gICAgICAgICAkc2l6ZTogMTBweFxyXG4vLy8gICAgICAgKTtcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzMiB7XHJcbi8vLyAgICAgJjo6YmVmb3JlIHtcclxuLy8vICAgICAgIEBpbmNsdWRlIHN2Zy1pY29uKFxyXG4vLy8gICAgICAgICAkc3ZnOiAnPHBhdGggZD1cIiBNIDEyIDE0IEwgMCAwIEwgMjQgMCBMIDEyIDE0IFogXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiLz4nLFxyXG4vLy8gICAgICAgICAkc2l6ZTogMjBweCxcclxuLy8vICAgICAgICAgJGNvbG9yOiBjb2xvcihkYXJrLCBsaWdodClcclxuLy8vICAgICAgICk7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzczMge1xyXG4vLy8gICAgICY6OmJlZm9yZSB7XHJcbi8vLyAgICAgICBAaW5jbHVkZSBzdmctaWNvbihcclxuLy8vICAgICAgICAgJHN2ZzogJzxwYXRoIGQ9XCIgTSAxMiAxNCBMIDAgMCBMIDI0IDAgTCAxMiAxNCBaIFwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIi8+JyxcclxuLy8vICAgICAgICAgJHNpemU6IDJyZW0sXHJcbi8vLyAgICAgICAgICRjb2xvcjogY29sb3Iod2FybmluZyksXHJcbi8vLyAgICAgICAgICRzdHJva2U6IGNvbG9yKGF0dGVudGlvbilcclxuLy8vICAgICAgICk7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jbGFzczE6OmJlZm9yZSB7XHJcbi8vLyAgICAgY29udGVudDogJyc7XHJcbi8vLyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLy8gICAgIHdpZHRoOiAwLjYyNXJlbTtcclxuLy8vICAgICBoZWlnaHQ6IDAuNjI1cmVtO1xyXG4vLy8gICAgIGJhY2tncm91bmQtcG9zaXRpb246IDUwJTtcclxuLy8vICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4vLy8gICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cInJnYigxMDIsIDEwMiwgMTAyKVwiID48cGF0aCBkPVwiIE0gMTIgMTQgTCAwIDAgTCAyNCAwIEwgMTIgMTQgWiBcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIvPjwvc3ZnPicpO1xyXG4vLy8gICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3MyOjpiZWZvcmUge1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy8vICAgICB3aWR0aDogMS4yNXJlbTtcclxuLy8vICAgICBoZWlnaHQ6IDEuMjVyZW07XHJcbi8vLyAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlO1xyXG4vLy8gICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCw8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwicmdiKDE1MywgMTUzLCAxNTMpXCIgPjxwYXRoIGQ9XCIgTSAxMiAxNCBMIDAgMCBMIDI0IDAgTCAxMiAxNCBaIFwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIi8+PC9zdmc+Jyk7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzczM6OmJlZm9yZSB7XHJcbi8vLyAgICAgY29udGVudDogJyc7XHJcbi8vLyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLy8gICAgIHdpZHRoOiAycmVtO1xyXG4vLy8gICAgIGhlaWdodDogMnJlbTtcclxuLy8vICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCU7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuLy8vICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJyZ2IoMjU1LCAxODAsIDE5KVwiIHN0cm9rZT1cInJnYigyMTEsIDUsIDY5KVwiPjxwYXRoIGQ9XCIgTSAxMiAxNCBMIDAgMCBMIDI0IDAgTCAxMiAxNCBaIFwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIi8+PC9zdmc+Jyk7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBzdmctaWNvbigkc3ZnLCAkc2l6ZSwgJGNvbG9yOiBjb2xvcihkYXJrKSwgJHN0cm9rZTogbnVsbCkge1xyXG4gICRzaXplOiBpZih1bml0KCRzaXplKSA9PSAncHgnLCByZW0oJHNpemUpLCAkc2l6ZSk7XHJcblxyXG4gIEBpbmNsdWRlIGNzcy1jb250ZW50KCRzaXplKTtcclxuXHJcbiAgYmFja2dyb3VuZDoge1xyXG4gICAgcG9zaXRpb246IDUwJTtcclxuICAgIHJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgaW1hZ2U6IHVybChfc3ZnLWJhY2tncm91bmQoJHN2Zy1jb250ZW50OiAkc3ZnLCAkc3ZnLWNvbG9yOiAkY29sb3IsICRzdmctc3Ryb2tlOiAkc3Ryb2tlKSk7XHJcbiAgICBzaXplOiBjb250YWluO1xyXG4gIH07XHJcbn1cclxuIiwiLy8vIE1peGluIHF1ZSBhZGljaW9uYSBhcyBtYXJnZW5zIGxhdGVyYWlzIChwYWRyw6NvKSBlbnRyZSBhIHZpZXcgZSBvIGNvbnRlw7pkb1xyXG4vLy8gZ2VyYWwuIMOJIHBlcm1pdGlkbyBpbmZvcm1hciBxdWFscXVlciBwcm9wcmllZGFkZSBwYXJhIGluc2VyaXIgZSB0YW1iw6ltIHNlIG9zXHJcbi8vLyB2YWxvcmVzIGluc2VyaWRvcyBzZXLDo28gbmVnYXRpdm9zICh2ZWphIG5vcyBleGVtcGxvcyBkZSB1c28pXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEBwYXJhbSB7c3RyaW5nfSAkcHJvcGVydHkgW3BhZGRpbmddIC0gUHJvcHJpZWRhZGUgZW0gcXVlIHNlIGRlc2VqYSBvIHZhbG9yLlxyXG4vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcyBvcMOnw7VlcyBzw6NvOiAncGFkZGluZycgZSAnbWFyZ2luJ1xyXG4vLy9cclxuLy8vIEBvdXRwdXQgIFF1YW5kbyBjb21waWxhZG8gY29sb2NhIHRvZGFzIGFzIHByb3ByaWVkYWRlcyBkZWZpbmlkYXMgZSBhcyBtZWRpYVxyXG4vLy8gICAgICAgICAgcXVlcmllIGNvcnJlc3BvbmRlbnRlXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3NlLTEge1xyXG4vLy8gICAgIEBpbmNsdWRlIHZpZXctbWFyZ2lucztcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vICAgLmNsYXNzZS0yIHtcclxuLy8vICAgICBAaW5jbHVkZSB2aWV3LW1hcmdpbnMocmlnaHQpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gICAuY2xhc3NlLTMge1xyXG4vLy8gICAgIEBpbmNsdWRlIHZpZXctbWFyZ2lucygobmVnYXRpdmU6IG1hcmdpbikpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gICAuY2xhc3NlLTQge1xyXG4vLy8gICAgIEBpbmNsdWRlIHZpZXctbWFyZ2lucygobmVnYXRpdmU6IG1hcmdpbiksIHBhZGRpbmcpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gICAuY2xhc3NlLTUge1xyXG4vLy8gICAgIEBpbmNsdWRlIHZpZXctbWFyZ2lucyhtYXJnaW4sIChuZWdhdGl2ZTogcGFkZGluZykpO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jbGFzc2UtMSB7XHJcbi8vLyAgICAgcGFkZGluZy1yaWdodDogNnZ3O1xyXG4vLy8gICAgIHBhZGRpbmctbGVmdDogNnZ3O1xyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiAzNS4zNzVlbSkge1xyXG4vLy8gICAgIC5jbGFzc2UtMSB7XHJcbi8vLyAgICAgICBwYWRkaW5nLXJpZ2h0OiAzdnc7XHJcbi8vLyAgICAgICBwYWRkaW5nLWxlZnQ6IDN2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vICAgQG1lZGlhIChtaW4td2lkdGg6IDQ4ZW0pIHtcclxuLy8vICAgICAuY2xhc3NlLTEge1xyXG4vLy8gICAgICAgcGFkZGluZy1yaWdodDogM3Z3O1xyXG4vLy8gICAgICAgcGFkZGluZy1sZWZ0OiAzdnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA2MmVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS0xIHtcclxuLy8vICAgICAgIHBhZGRpbmctcmlnaHQ6IDR2dztcclxuLy8vICAgICAgIHBhZGRpbmctbGVmdDogNHZ3O1xyXG4vLy8gICAgIH1cclxuLy8vICAgfVxyXG4vLy8gICBAbWVkaWEgKG1pbi13aWR0aDogNzVlbSkge1xyXG4vLy8gICAgIC5jbGFzc2UtMSB7XHJcbi8vLyAgICAgICBwYWRkaW5nLXJpZ2h0OiAzLjV2dztcclxuLy8vICAgICAgIHBhZGRpbmctbGVmdDogMy41dnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gICAuY2xhc3NlLTIge1xyXG4vLy8gICAgIHJpZ2h0OiA2dnc7XHJcbi8vLyAgIH1cclxuLy8vICAgQG1lZGlhIChtaW4td2lkdGg6IDM1LjM3NWVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS0yIHtcclxuLy8vICAgICAgIHJpZ2h0OiAzdnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA0OGVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS0yIHtcclxuLy8vICAgICAgIHJpZ2h0OiAzdnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA2MmVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS0yIHtcclxuLy8vICAgICAgIHJpZ2h0OiA0dnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA3NWVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS0yIHtcclxuLy8vICAgICAgIHJpZ2h0OiAzLjV2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyAgIC5jbGFzc2UtMyB7XHJcbi8vLyAgICAgbWFyZ2luOiAtNnZ3O1xyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiAzNS4zNzVlbSkge1xyXG4vLy8gICAgIC5jbGFzc2UtMyB7XHJcbi8vLyAgICAgICBtYXJnaW46IC0zdnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA0OGVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS0zIHtcclxuLy8vICAgICAgIG1hcmdpbjogLTN2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vICAgQG1lZGlhIChtaW4td2lkdGg6IDYyZW0pIHtcclxuLy8vICAgICAuY2xhc3NlLTMge1xyXG4vLy8gICAgICAgbWFyZ2luOiAtNHZ3O1xyXG4vLy8gICAgIH1cclxuLy8vICAgfVxyXG4vLy8gICBAbWVkaWEgKG1pbi13aWR0aDogNzVlbSkge1xyXG4vLy8gICAgIC5jbGFzc2UtMyB7XHJcbi8vLyAgICAgICBtYXJnaW46IC0zLjV2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyAgIC5jbGFzc2UtNCB7XHJcbi8vLyAgICAgbWFyZ2luOiAtNnZ3O1xyXG4vLy8gICAgIHBhZGRpbmc6IDZ2dztcclxuLy8vICAgfVxyXG4vLy8gICBAbWVkaWEgKG1pbi13aWR0aDogMzUuMzc1ZW0pIHtcclxuLy8vICAgICAuY2xhc3NlLTQge1xyXG4vLy8gICAgICAgbWFyZ2luOiAtM3Z3O1xyXG4vLy8gICAgICAgcGFkZGluZzogM3Z3O1xyXG4vLy8gICAgIH1cclxuLy8vICAgfVxyXG4vLy8gICBAbWVkaWEgKG1pbi13aWR0aDogNDhlbSkge1xyXG4vLy8gICAgIC5jbGFzc2UtNCB7XHJcbi8vLyAgICAgICBtYXJnaW46IC0zdnc7XHJcbi8vLyAgICAgICBwYWRkaW5nOiAzdnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA2MmVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS00IHtcclxuLy8vICAgICAgIG1hcmdpbjogLTR2dztcclxuLy8vICAgICAgIHBhZGRpbmc6IDR2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vICAgQG1lZGlhIChtaW4td2lkdGg6IDc1ZW0pIHtcclxuLy8vICAgICAuY2xhc3NlLTQge1xyXG4vLy8gICAgICAgbWFyZ2luOiAtMy41dnc7XHJcbi8vLyAgICAgICBwYWRkaW5nOiAzLjV2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyAgIC5jbGFzc2UtNSB7XHJcbi8vLyAgICAgbWFyZ2luOiA2dnc7XHJcbi8vLyAgICAgcGFkZGluZzogLTZ2dztcclxuLy8vICAgfVxyXG4vLy8gICBAbWVkaWEgKG1pbi13aWR0aDogMzUuMzc1ZW0pIHtcclxuLy8vICAgICAuY2xhc3NlLTUge1xyXG4vLy8gICAgICAgbWFyZ2luOiAzdnc7XHJcbi8vLyAgICAgICBwYWRkaW5nOiAtM3Z3O1xyXG4vLy8gICAgIH1cclxuLy8vICAgfVxyXG4vLy8gICBAbWVkaWEgKG1pbi13aWR0aDogNDhlbSkge1xyXG4vLy8gICAgIC5jbGFzc2UtNSB7XHJcbi8vLyAgICAgICBtYXJnaW46IDN2dztcclxuLy8vICAgICAgIHBhZGRpbmc6IC0zdnc7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIEBtZWRpYSAobWluLXdpZHRoOiA2MmVtKSB7XHJcbi8vLyAgICAgLmNsYXNzZS01IHtcclxuLy8vICAgICAgIG1hcmdpbjogNHZ3O1xyXG4vLy8gICAgICAgcGFkZGluZzogLTR2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vICAgQG1lZGlhIChtaW4td2lkdGg6IDc1ZW0pIHtcclxuLy8vICAgICAuY2xhc3NlLTUge1xyXG4vLy8gICAgICAgbWFyZ2luOiAzLjV2dztcclxuLy8vICAgICAgIHBhZGRpbmc6IC0zLjV2dztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuQG1peGluIHZpZXctbWFyZ2lucygkcHJvcGVydGllcy4uLikge1xyXG4gIEBpZiBsZW5ndGgoJHByb3BlcnRpZXMpID09IDAge1xyXG4gICAgJHByb3BlcnRpZXM6IChwYWRkaW5nLXJpZ2h0LCBwYWRkaW5nLWxlZnQpO1xyXG4gIH1cclxuXHJcbiAgQGVhY2ggJHByb3BlcnR5IGluICRwcm9wZXJ0aWVzIHtcclxuICAgICR0aGlzLXZhbHVlOiBtYXAtZ2V0KCR2aWV3LW1hcmdpbnMsIG50aChtYXAta2V5cygkdmlldy1tYXJnaW5zKSwgMSkpO1xyXG5cclxuICAgIEBpZiB0eXBlLW9mKCRwcm9wZXJ0eSkgPT0gbWFwIHtcclxuICAgICAgJHByb3AtbmFtZTogbWFwLXZhbHVlcygkcHJvcGVydHkpO1xyXG5cclxuICAgICAgQGlmICR0aGlzLXZhbHVlIHtcclxuICAgICAgICAjeyRwcm9wLW5hbWV9OiAkdGhpcy12YWx1ZSAqIC0xO1xyXG4gICAgICB9XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgI3skcHJvcGVydHl9OiAkdGhpcy12YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBlYWNoICRicmVha3BvaW50LCAkdmFsdWUgaW4gJGJyZWFrcG9pbnRzIHtcclxuICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8oJGJyZWFrcG9pbnQpIHtcclxuICAgICAgQGVhY2ggJHByb3BlcnR5IGluICRwcm9wZXJ0aWVzIHtcclxuICAgICAgICAkdGhpcy12YWx1ZTogbWFwLWdldCgkdmlldy1tYXJnaW5zLCAkYnJlYWtwb2ludCk7XHJcblxyXG4gICAgICAgIEBpZiB0eXBlLW9mKCRwcm9wZXJ0eSkgPT0gbWFwIHtcclxuICAgICAgICAgICRwcm9wLW5hbWU6IG1hcC12YWx1ZXMoJHByb3BlcnR5KTtcclxuXHJcbiAgICAgICAgICBAaWYgJHRoaXMtdmFsdWUge1xyXG4gICAgICAgICAgICAjeyRwcm9wLW5hbWV9OiAkdGhpcy12YWx1ZSAqIC0xO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICAgI3skcHJvcGVydHl9OiAkdGhpcy12YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8vIE1peGluIHF1ZSBhdHJpYnVpIGEgbGFyZ3VyYSBlIG1hcmdlbSBkZSB1bSBlbGVtZW50byBjb20gYmFzZSBuYSBjb2x1bmFnZW0gZG9cclxuLy8vIGdyaWQuIENvbW8gcGFkcsOjbyBlc3RlIG1peGluIGFkaWNpb25hIG1hcmdlbSDDoCBlc3F1ZXJkYSBkb3MgZWxlbWVudG9zIHBhcmFcclxuLy8vIGZhemVyIGEgc2VwYXJhw6fDo28gZGFzIGNvbHVuYXMgZGUgYWNvcmRvIGNvbSBvIGBndXR0ZXJgIGRvIGdyaWQuIENhc28gc2VqYSBvXHJcbi8vLyBwcmltZWlybyBlbGVtZW50byBkYSBsaW5oYSAocm93KSwgZGV2ZSBzZXIgcGFzc2FkbyBvIHZhbG9yIGB0cnVlYCBwYXJhIG9cclxuLy8vIHBhcsOibWV0cm8gXCJpcy1maXJzdFwiXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIGRlZmluaWRhcyBubyBtaXhpblxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtudW1iZXJ9ICRjb2x1bW5zIC0gUXVhbnRpZGFkZSBkZSBjb2x1bmFzIGRlc2VqYWRhc1xyXG4vLy8gQHBhcmFtICAge2Jvb2x9ICRpcy1maXJzdCBbZmFsc2VdIC0gRGV0ZXJtaW5hIHNlIMOpIGEgcHJpbWVpcmEgY29sdW5hIGRhIGxpbmhhXHJcbi8vLyAgICAgICAgICAgICAgICAgKHJvdykgZGUgZWxlbWVudG9zIGNvbHVuYWRvcy5cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5jbGFzc2UtZWxlbWVudG8tY29sdW5hZG8ge1xyXG4vLy8gICAgIEBpbmNsdWRlIGNvbHVtbig0KTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIGNzcyAtIENvbXBpbGFkbztcclxuLy8vICAgLmNsYXNzZS1lbGVtZW50by1jb2x1bmFkbyB7XHJcbi8vLyAgICAgd2lkdGg6IGNhbGMoMzMuMzMzMzMzMzMlIC0gNDBweCk7XHJcbi8vLyAgICAgbWFyZ2luLWxlZnQ6IDEuMjVyZW07XHJcbi8vLyAgIH1cclxuQG1peGluIGNvbHVtbigkY29sdW1ucykge1xyXG4gICRncmlkLW1heC1jb2x1bW5zOiBtYXAtZ2V0KCRncmlkLCBjb2x1bW5zKTtcclxuXHJcbiAgQGlmIHR5cGUtb2YoJGNvbHVtbnMpICE9IG51bWJlciB7XHJcbiAgICBAd2FybiAnTyB2YWxvciBkZSBcIiRjb2x1bW5zXCIgcHJlY2lzYSBzZXIgdW0gbnVtZXJvJztcclxuICB9IEBlbHNlIGlmICRjb2x1bW5zID4gJGdyaWQtbWF4LWNvbHVtbnMge1xyXG4gICAgQHdhcm4gJ08gdmFsb3IgZGUgXCIkY29sdW1uc1wiIHByZWNpc2Egc2VyIG1lbm9yIG91IGlndWFsIGEgI3skZ3JpZC1tYXgtY29sdW1uc30nO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgd2lkdGg6IGNvbHVtbigkY29sdW1ucyk7XHJcblxyXG4gICAgbWFyZ2luOiB7XHJcbiAgICAgIHJpZ2h0OiBzcGFjZShncmlkKSAvIDI7XHJcbiAgICAgIGxlZnQ6IHNwYWNlKGdyaWQpIC8gMjtcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsIi8vLyBNaXhpbiBwYXJhIGNyaWFyIGVzdGlsb3MgcGFkcsOjbyBwYXJhIGVsZW1lbnRvcyBkZSBmb3JtdWzDoXJpbyBjb21vIGlucHV0cyxcclxuLy8vIHNlbGVjdHMsIHRleHRhcmVhcywgZXRjLlxyXG4vLy9cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIGlucHV0IHtcclxuLy8vICAgICBAaW5jbHVkZSBhbGwtaW5wdXQtdGV4dC1saWtlIHtcclxuLy8vICAgICAgIHBhZGRpbmc6IHtcclxuLy8vICAgICAgICAgdG9wOiAxMHB4O1xyXG4vLy8gICAgICAgICBib3R0b206IDE1cHg7XHJcbi8vLyAgICAgICB9O1xyXG4vLy8gICAgIH1cclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3NlIHtcclxuLy8vICAgICBAaW5jbHVkZSBhbGwtaW5wdXQtdGV4dC1saWtlIHtcclxuLy8vICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNmMDA7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAgaW5wdXRbdHlwZT0ndGV4dCddLFxyXG4vLy8gICAgaW5wdXRbdHlwZT0ncGFzc3dvcmQnXSxcclxuLy8vICAgIGlucHV0W3R5cGU9J3VybCddLFxyXG4vLy8gICAgaW5wdXRbdHlwZT0nZW1haWwnXSxcclxuLy8vICAgIGlucHV0W3R5cGU9J3RlbCddLFxyXG4vLy8gICAgaW5wdXRbdHlwZT0nc2VhcmNoJ10sXHJcbi8vLyAgICBpbnB1dFt0eXBlPSdudW1iZXInXSxcclxuLy8vICAgIGlucHV0W3R5cGU9J2RhdGUnXSxcclxuLy8vICAgIGlucHV0W3R5cGU9J21vbnRoJ10sXHJcbi8vLyAgICBpbnB1dFt0eXBlPSd3ZWVrJ10sXHJcbi8vLyAgICBpbnB1dFt0eXBlPSdkYXRldGltZSddLFxyXG4vLy8gICAgaW5wdXRbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSB7XHJcbi8vLyAgICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4vLy8gICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcclxuLy8vICAgIH1cclxuLy8vICAgIC5jbGFzc2VbdHlwZT0ndGV4dCddLFxyXG4vLy8gICAgLmNsYXNzZVt0eXBlPSdwYXNzd29yZCddLFxyXG4vLy8gICAgLmNsYXNzZVt0eXBlPSd1cmwnXSxcclxuLy8vICAgIC5jbGFzc2VbdHlwZT0nZW1haWwnXSxcclxuLy8vICAgIC5jbGFzc2VbdHlwZT0ndGVsJ10sXHJcbi8vLyAgICAuY2xhc3NlW3R5cGU9J3NlYXJjaCddLFxyXG4vLy8gICAgLmNsYXNzZVt0eXBlPSdudW1iZXInXSxcclxuLy8vICAgIC5jbGFzc2VbdHlwZT0nZGF0ZSddLFxyXG4vLy8gICAgLmNsYXNzZVt0eXBlPSdtb250aCddLFxyXG4vLy8gICAgLmNsYXNzZVt0eXBlPSd3ZWVrJ10sXHJcbi8vLyAgICAuY2xhc3NlW3R5cGU9J2RhdGV0aW1lJ10sXHJcbi8vLyAgICAuY2xhc3NlW3R5cGU9J2RhdGV0aW1lLWxvY2FsJ10ge1xyXG4vLy8gICAgICBib3JkZXI6IHNvbGlkIDFweCAjZjAwO1xyXG4vLy8gICAgfVxyXG5AbWl4aW4gYWxsLWlucHV0LXRleHQtbGlrZSB7XHJcbiAgQGF0LXJvb3Qge1xyXG4gICAgJHBsYWNlaG9sZGVyOiB1bmlxdWUtaWQoKTtcclxuXHJcbiAgICAlI3skcGxhY2Vob2xkZXJ9IHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgQGVhY2ggJGl0ZW0gaW4gJGlucHV0LXRleHQtbGlrZS10eXBlcyB7XHJcbiAgICAgICZbdHlwZT0nI3skaXRlbX0nXSB7XHJcbiAgICAgICAgQGV4dGVuZCAlI3skcGxhY2Vob2xkZXJ9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vLyBNaXhpbiBwYXJhIGNyaWFyIHRyacOibmd1bG9zIGluc2VyaWRvcyBlbSBwc2V1ZG8tZWxlbWVudG9zIGA6OmFmdGVyYCBlXHJcbi8vLyBgOjpiZWZvcmVgXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtzdHJpbmd9ICRkaXJlY3Rpb24gLSBEaXJlw6fDo28gZG8gdsOpcnRpY2UgZG8gdHJpw6JuZ3VsbyAodG9wbykuIFBvZGVcclxuLy8vICAgICAgICAgIHNlciBgdG9wYCwgYHJpZ2h0YCwgYGJvdHRvbWAgb3UgYGxlZnRgXHJcbi8vLyBAcGFyYW0gICB7Y29sb3J9ICRjb2xvciAtIENvciB1dGlsaXphZGEgbm8gcHJlZW5jaGltZW50byBkbyB0cmnDom5ndWxvXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkd2lkdGggWzFlbV0gLSBMYXJndXJhIChiYXNlKSBkbyB0cmnDom5ndWxvXHJcbi8vLyBAcGFyYW0gICB7bnVtYmVyfSAkaGVpZ2h0IFskd2lkdGhdIC0gQWx0dXJhIGRvIHRyacOibmd1bG8uIFNlIG5lbmh1bWEgYWx0dXJhXHJcbi8vLyAgICAgICAgICBmb3IgZXNwZWNpZmljYWRhLCBhIGxhcmd1cmEgc2Vyw6EgdXRpbGl6YWRhIGNvbW8gYmFzZSBwYXJhIGRlZmluw60tbGFcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIHN0cm9uZyB7XHJcbi8vLyAgICAgJjo6YmVmb3JlIHtcclxuLy8vICAgICAgIEBpbmNsdWRlIHRyaWFuZ2xlKFxyXG4vLy8gICAgICAgICAkZGlyZWN0aW9uOiBib3R0b20sXHJcbi8vLyAgICAgICAgICRjb2xvcjogY29sb3IocHJpbWFyeSksXHJcbi8vLyAgICAgICAgICR3aWR0aDogMXJlbSxcclxuLy8vICAgICAgICAgJGhlaWdodDogMnJlbVxyXG4vLy8gICAgICAgKTtcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyAgIHNwYW4ge1xyXG4vLy8gICAgICY6OmJlZm9yZSB7XHJcbi8vLyAgICAgICBAaW5jbHVkZSB0cmlhbmdsZShcclxuLy8vICAgICAgICAgJGRpcmVjdGlvbjogdG9wLFxyXG4vLy8gICAgICAgICAkY29sb3I6IGNvbG9yKHN1Y2Nlc3MpLFxyXG4vLy8gICAgICAgICAkd2lkdGg6IDIwcHhcclxuLy8vICAgICAgICk7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gICBlbSB7XHJcbi8vLyAgICAgJjo6YmVmb3JlIHtcclxuLy8vICAgICAgIEBpbmNsdWRlIHRyaWFuZ2xlKFxyXG4vLy8gICAgICAgICAkZGlyZWN0aW9uOiBsZWZ0LFxyXG4vLy8gICAgICAgICAkY29sb3I6IGNvbG9yKHdhcm5pbmcpXHJcbi8vLyAgICAgICApO1xyXG4vLy8gICAgIH1cclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgc3Ryb25nOjpiZWZvcmUge1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICAgIHdpZHRoOiAwO1xyXG4vLy8gICAgIGhlaWdodDogMDtcclxuLy8vICAgICBib3JkZXItdG9wOiAycmVtIHNvbGlkICMxMzgxY2U7XHJcbi8vLyAgICAgYm9yZGVyLWJvdHRvbTogMCBzb2xpZCB0cmFuc3BhcmVudDtcclxuLy8vICAgICBib3JkZXItcmlnaHQ6IDAuNXJlbSBzb2xpZCB0cmFuc3BhcmVudDtcclxuLy8vICAgICBib3JkZXItbGVmdDogMC41cmVtIHNvbGlkIHRyYW5zcGFyZW50O1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gICBzcGFuOjpiZWZvcmUge1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICAgIHdpZHRoOiAwO1xyXG4vLy8gICAgIGhlaWdodDogMDtcclxuLy8vICAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICMyOGFhNDY7XHJcbi8vLyAgICAgYm9yZGVyLXRvcDogMCBzb2xpZCB0cmFuc3BhcmVudDtcclxuLy8vICAgICBib3JkZXItcmlnaHQ6IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbi8vLyAgICAgYm9yZGVyLWxlZnQ6IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyAgIGVtOjpiZWZvcmUge1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICAgIHdpZHRoOiAwO1xyXG4vLy8gICAgIGhlaWdodDogMDtcclxuLy8vICAgICBib3JkZXItcmlnaHQ6IDAuNWVtIHNvbGlkICNmZmI0MTM7XHJcbi8vLyAgICAgYm9yZGVyLWxlZnQ6IDAgc29saWQgdHJhbnNwYXJlbnQ7XHJcbi8vLyAgICAgYm9yZGVyLXRvcDogMC41ZW0gc29saWQgdHJhbnNwYXJlbnQ7XHJcbi8vLyAgICAgYm9yZGVyLWJvdHRvbTogMC41ZW0gc29saWQgdHJhbnNwYXJlbnQ7XHJcbi8vLyAgIH1cclxuQG1peGluIHRyaWFuZ2xlKCRkaXJlY3Rpb24sICRjb2xvciwgJHdpZHRoOiAxZW0sICRoZWlnaHQ6IG51bGwpIHtcclxuICBAaWYgbm90IGluZGV4KHRvcCByaWdodCBib3R0b20gbGVmdCwgJGRpcmVjdGlvbikge1xyXG4gICAgQHdhcm4gJ0EgdmFyaWF2ZWwgXCIkZGlyZWN0aW9uXCIgaW5mb3JtYWRhIChgI3skZGlyZWN0aW9ufWApIGRldmUgc2VyIGB0b3BgLCBgcmlnaHRgLCBgYm90dG9tYCBvdSBgbGVmdGAhJztcclxuICB9IEBlbHNlIGlmIHR5cGUtb2YoJGNvbG9yKSAhPSBjb2xvciB7XHJcbiAgICBAd2FybiAnXCIkY29sb3JcIiBkZXZlIHNlciB1bWEgY29yIHZhbGlkYSEnO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJGhlaWdodDogaWYoJGhlaWdodCA9PSBudWxsLCAkd2lkdGggKiAuNSwgJGhlaWdodCk7XHJcbiAgICAkcGVycGVuZGljdWxhci1ib3JkZXJzOiAoJHdpZHRoICogLjUpIHNvbGlkIHRyYW5zcGFyZW50O1xyXG5cclxuICAgIGNvbnRlbnQ6ICcnO1xyXG5cclxuICAgIHdpZHRoOiAwO1xyXG4gICAgaGVpZ2h0OiAwO1xyXG5cclxuICAgIGJvcmRlci0je19vcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbil9OiAkaGVpZ2h0IHNvbGlkICRjb2xvcjtcclxuICAgIGJvcmRlci0jeyRkaXJlY3Rpb259OiAwIHNvbGlkIHRyYW5zcGFyZW50O1xyXG5cclxuICAgIEBpZiAkZGlyZWN0aW9uID09IHRvcCBvciAkZGlyZWN0aW9uID09IGJvdHRvbSB7XHJcbiAgICAgIGJvcmRlcjoge1xyXG4gICAgICAgIHJpZ2h0OiAkcGVycGVuZGljdWxhci1ib3JkZXJzO1xyXG4gICAgICAgIGxlZnQ6ICRwZXJwZW5kaWN1bGFyLWJvcmRlcnM7XHJcbiAgICAgIH1cclxuICAgIH0gQGVsc2UgaWYgJGRpcmVjdGlvbiA9PSByaWdodCBvciAkZGlyZWN0aW9uID09IGxlZnQge1xyXG4gICAgICBib3JkZXI6IHtcclxuICAgICAgICB0b3A6ICRwZXJwZW5kaWN1bGFyLWJvcmRlcnM7XHJcbiAgICAgICAgYm90dG9tOiAkcGVycGVuZGljdWxhci1ib3JkZXJzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vLyBNaXhpbiBxdWUgYWRpY2lvbmEgbyBDU1MgbmVjZXNzw6FyaW8gcGFyYSBxdWUgcXVhbmRvIG8gdGV4dG8gc2VqYSBtYWlvciBxdWUgb1xyXG4vLy8gY29udGFpbmVyIHNlamFtIGFkaWNpb25hZG9zIG9zIFwidHLDqnMgcG9udGluaG9zXCIuXHJcbi8vL1xyXG4vLy8gKipFeGVtcGxvKio6IGBsb3JlbSBpcHN1bSBibGEgYmxhYmxhYmwuLi5gXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIGVzcGVjaWZpY2FkYXMgbm8gbWl4aW5cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5jbGFzcyB7XHJcbi8vLyAgICAgQGluY2x1ZGUgZWxsaXBzaXM7XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmNsYXNzIHtcclxuLy8vICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4vLy8gICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4vLy8gICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbi8vLyAgIH1cclxuQG1peGluIGVsbGlwc2lzIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuIiwiLy8vIE1peGluIHBhcmEgbGltcGFyIG9zIGVzdGlsb3MgYsOhc2ljb3MgcXVlIG8gbmF2ZWdhZG9yIGNvbG9jYSBub3MgaW5wdXRzIHJhZGlvXHJcbi8vLyBlIGNoZWNrYm94IGFzc2ltIGNvbW8gXCJlc2NvbmRlciBvIGVsZW1lbnRvIGlucHV0XCIgcGFyYSBwb2RlciB0cmFiYWxoYXIgY29tXHJcbi8vLyBvIGxhYmVsIGUgY3VzdG9taXphciBvIGxheW91dC4gT3MgZXN0aWxvcyBhcGxpY2Fkb3MgZW50cmUgYXMgY2hhdmVzIHPDo29cclxuLy8vIGFkaWNpb25hZG9zIGFvIGVsZW1lbnRvIGBsYWJlbGBcclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vL1xyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIGluY2x1w61kYXMgZGVudHJvIGRvXHJcbi8vLyAgICAgICAgICBtaXhpbiBtYWlzIGFzIHF1ZSBmb3JhbSBhZGljaW9uYWRhcyBlbnRyZSBhcyBjaGF2ZXMgKGNvbnRlbnQpXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY3VzdG9tLWNob2ljZSB7XHJcbi8vLyAgICAgQGluY2x1ZGUgY3VzdG9tLXJhZGlvLWNoZWNrYm94IHtcclxuLy8vICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmMDA7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jdXN0b20tY2hvaWNlIHtcclxuLy8vICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vLyAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jdXN0b20tY2hvaWNlIGlucHV0IHtcclxuLy8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vLyAgICAgd2lkdGg6IDFweDtcclxuLy8vICAgICBoZWlnaHQ6IDFweDtcclxuLy8vICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4vLy8gICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcclxuLy8vICAgICBib3JkZXI6IDA7XHJcbi8vLyAgIH1cclxuLy8vICAgLmN1c3RvbS1jaG9pY2UgaW5wdXQgfiBsYWJlbCB7XHJcbi8vLyAgICAgYm9yZGVyOiAxcHggc29saWQgI2YwMDtcclxuLy8vICAgfVxyXG5AbWl4aW4gY3VzdG9tLXJhZGlvLWNoZWNrYm94IHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gIGlucHV0IHtcclxuICAgIEBpbmNsdWRlIGhpZGUtZWxlbWVudDtcclxuXHJcbiAgICB+IGxhYmVsIHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vLyBNaXhpbiBwYXJhIGZhY2lsaXRhciBhIGNyaWHDp8OjbyBkZSBlc3RpbG9zIHBhcmEgbyBzdGF0dXMgYGhvdmVyYCBlIGBmb2N1c2BcclxuLy8vIHBhcmEgaW5wdXRzIHBlcnNvbmFsaXphZG9zICpjaGVja2Fkb3MqLiBPcyBlc3RpbG9zIGFwbGljYWRvcyBlbnRyZSBhcyBjaGF2ZXNcclxuLy8vIHPDo28gYWRpY2lvbmFkb3MgYW8gZWxlbWVudG8gYGxhYmVsYC5cclxuLy8vXHJcbi8vLyBAZ3JvdXAgICBUb29scyBbRmVycmFtZW50YXNdXHJcbi8vL1xyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIHF1ZSBmb3JhbSBhZGljaW9uYWRhc1xyXG4vLy8gICAgICAgICAgZW50cmUgYXMgY2hhdmVzIChjb250ZW50KVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgLmN1c3RvbS1jaG9pY2Uge1xyXG4vLy8gICAgIEBpbmNsdWRlIGN1c3RvbS1yYWRpby1jaGVja2JveC1ob3ZlciB7XHJcbi8vLyAgICAgICBjb2xvcjogcmVkO1xyXG4vLy8gICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2YwZjtcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmN1c3RvbS1jaG9pY2UgaW5wdXQ6Zm9jdXMgfiBsYWJlbCxcclxuLy8vICAgLmN1c3RvbS1jaG9pY2UgaW5wdXQ6aG92ZXIgfiBsYWJlbCB7XHJcbi8vLyAgICAgY29sb3I6IHJlZDtcclxuLy8vICAgICBib3JkZXI6IHNvbGlkIDFweCAjZjBmO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBjdXN0b20tcmFkaW8tY2hlY2tib3gtaG92ZXIge1xyXG4gIGlucHV0IHtcclxuICAgICY6Zm9jdXMsXHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgfiBsYWJlbCB7XHJcbiAgICAgICAgQGNvbnRlbnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8vIE1peGluIHBhcmEgZmFjaWxpdGFyIGEgY3JpYcOnw6NvIGRlIGVzdGlsb3MgcGFyYSBpbnB1dHMgcGVyc29uYWxpemFkb3NcclxuLy8vICpjaGVja2Fkb3MqLiBPcyBlc3RpbG9zIGFwbGljYWRvcyBlbnRyZSBhcyBjaGF2ZXMgc8OjbyBhZGljaW9uYWRvcyBhb1xyXG4vLy8gZWxlbWVudG8gYGxhYmVsYFxyXG4vLy9cclxuLy8vIEBncm91cCAgIFRvb2xzIFtGZXJyYW1lbnRhc11cclxuLy8vXHJcbi8vLyBAb3V0cHV0ICBRdWFuZG8gY29tcGlsYWRvIGNvbG9jYSB0b2RhcyBhcyBwcm9wcmllZGFkZXMgcXVlIGZvcmFtIGFkaWNpb25hZGFzXHJcbi8vLyAgICAgICAgICBlbnRyZSBhcyBjaGF2ZXMgKGNvbnRlbnQpXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY3VzdG9tLWNob2ljZSB7XHJcbi8vLyAgICAgQGluY2x1ZGUgY3VzdG9tLXJhZGlvLWNoZWNrYm94LWNoZWNrZWQge1xyXG4vLy8gICAgICAgY29sb3I6IHJlZDtcclxuLy8vICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNmMGY7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jdXN0b20tY2hvaWNlIGlucHV0OmNoZWNrZWQgfiBsYWJlbCB7XHJcbi8vLyAgICAgY29sb3I6IHJlZDtcclxuLy8vICAgICBib3JkZXI6IHNvbGlkIDFweCAjZjBmO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBjdXN0b20tcmFkaW8tY2hlY2tib3gtY2hlY2tlZCB7XHJcbiAgaW5wdXQge1xyXG4gICAgJjpjaGVja2VkIHtcclxuICAgICAgfiBsYWJlbCB7XHJcbiAgICAgICAgQGNvbnRlbnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8vIE1peGluIHF1ZSBpbmNsdWkgYXMgY2FyYWN0ZXLDrXN0aWNhcyBuZWNlc3PDoXJpYXMgcGFyYSBxdWUgdW0gZWxlbWVudG8gb3VcclxuLy8vIHBzZXVkby1lbGVtZW50byBzZSBjb252ZXJ0YSBlbSB1bSBvdmVybGF5XHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy8gQG91dHB1dCAgUXVhbmRvIGNvbXBpbGFkbyBjb2xvY2EgdG9kYXMgYXMgcHJvcHJpZWRhZGVzIGRlZmluaWRhc1xyXG4vLy9cclxuLy8vIEBwYXJhbSAgIHtjb2xvcn0gJG92ZXJsYXktY29sb3IgW3JnYmEoY29sb3Ioc2Vjb25kYXJ5KSwgLjgpXSAtIENvciBkbyBmdW5kb1xyXG4vLy8gICAgICAgICAgZG8gb3ZlcmxheS4gVGVtIHF1ZSBwYXNzYXIgZW0gZm9ybWF0byByZ2JhIHBhcmEgcXVlIHNlamEgdHJhbnNwYXJlbnRlXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3Mge1xyXG4vLy8gICAgICY6OmJlZm9yZSB7XHJcbi8vLyAgICAgICBAaW5jbHVkZSBvdmVybGF5LWNvbmZpZztcclxuLy8vICAgICB9XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzMiB7XHJcbi8vLyAgICAgJjo6YmVmb3JlIHtcclxuLy8vICAgICAgIEBpbmNsdWRlIG92ZXJsYXktY29uZmlnKHJlZCk7XHJcbi8vLyAgICAgfVxyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzczMge1xyXG4vLy8gICAgIEBpbmNsdWRlIG92ZXJsYXktY29uZmlnO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ29tcGlsYWRvXHJcbi8vLyAgIC5jbGFzczo6YmVmb3JlIHtcclxuLy8vICAgICBjb250ZW50OiAnJztcclxuLy8vICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vLyAgICAgd2lkdGg6IDEwMnZ3O1xyXG4vLy8gICAgIGhlaWdodDogMTAydmg7XHJcbi8vLyAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4vLy8gICAgIHRvcDogNTAlO1xyXG4vLy8gICAgIGxlZnQ6IDUwJTtcclxuLy8vICAgICB6LWluZGV4OiA5MzA7XHJcbi8vLyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAyNTUsIDAuOCk7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzMjo6YmVmb3JlIHtcclxuLy8vICAgICBjb250ZW50OiAnJztcclxuLy8vICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vLyAgICAgd2lkdGg6IDEwMnZ3O1xyXG4vLy8gICAgIGhlaWdodDogMTAydmg7XHJcbi8vLyAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4vLy8gICAgIHRvcDogNTAlO1xyXG4vLy8gICAgIGxlZnQ6IDUwJTtcclxuLy8vICAgICB6LWluZGV4OiA5MzA7XHJcbi8vLyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzczMge1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy8vICAgICB3aWR0aDogMTAydnc7XHJcbi8vLyAgICAgaGVpZ2h0OiAxMDJ2aDtcclxuLy8vICAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbi8vLyAgICAgdG9wOiA1MCU7XHJcbi8vLyAgICAgbGVmdDogNTAlO1xyXG4vLy8gICAgIHotaW5kZXg6IDkzMDtcclxuLy8vICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuLy8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDI1NSwgMC44KTtcclxuLy8vICAgfVxyXG5AbWl4aW4gb3ZlcmxheS1jb25maWcoJG92ZXJsYXktY29sb3I6IHJnYmEoY29sb3Ioc2Vjb25kYXJ5KSwgLjgpKSB7XHJcbiAgQGluY2x1ZGUgY3NzLWNvbnRlbnQoMTAydncsIDEwMnZoKTtcclxuXHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIHRvcDogNTAlO1xyXG4gIGxlZnQ6IDUwJTtcclxuICB6LWluZGV4OiBsYXllcihoaWdoKTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJG92ZXJsYXktY29sb3I7XHJcbn1cclxuIiwiLy8vIE1peGluIHBhcmEgY2VudHJhbGl6YXIgdW0gZWxlbWVudG8gaG9yaXpvbnRhbCBlIHZlcnRpY2FsbWVudGUuXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgVG9vbHMgW0ZlcnJhbWVudGFzXVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgc3ZnIHtcclxuLy8vICAgICBAaW5jbHVkZSBjZW50ZXItZWxlbWVudDtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgc3ZnIHtcclxuLy8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vLyAgICAgdG9wOiA1MCU7XHJcbi8vLyAgICAgbGVmdDogNTAlO1xyXG4vLy8gICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBjZW50ZXItZWxlbWVudCB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogNTAlO1xyXG4gIGxlZnQ6IDUwJTtcclxuXHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbn1cclxuIiwiLy8vIGBHYW1iaWFydGVgIHF1ZSBjb3JyaWdlIG8gYnVnIGNhdXNhZG8gcGVsbyB1c28gZXhjZXNzaXZvIGRvIGZsb2F0ICtQXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgT2JqZWN0cyBbT2JqZXRvc11cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgIC5lbGVtZW50IHtcclxuLy8vICAgICBAaW5jbHVkZSBjbGVhcmZpeDtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmVsZW1lbnQ6YWZ0ZXIge1xyXG4vLy8gICAgIGNvbnRlbnQ6ICcnO1xyXG4vLy8gICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4vLy8gICAgIGNsZWFyOiBib3RoO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBjbGVhcmZpeCB7XHJcbiAgQGlmIG1hcC1oYXMta2V5KCRicm93c2VyLW1pbi12ZXJzaW9uLCAnaWUnKSB7XHJcbiAgICAkbWluaW11bS1zdXBwb3J0OiBtYXAtZ2V0KCRicm93c2VyLW1pbi12ZXJzaW9uLCAnaWUnKTtcclxuXHJcbiAgICBAaWYgJG1pbmltdW0tc3VwcG9ydCA8IDgge1xyXG4gICAgICAmOjpiZWZvcmUsXHJcbiAgICAgICY6OmFmdGVyIHtcclxuICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgIGNsZWFyOiBib3RoO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAmIHtcclxuICAgICAgICB6b29tOiAxOyAvLyBGb3IgSUUgNi83ICh0cmlnZ2VyIGhhc0xheW91dClcclxuICAgICAgfVxyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICY6OmFmdGVyIHtcclxuICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcclxuICAgICAgICBjbGVhcjogYm90aDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gQGVsc2Uge1xyXG4gICAgQHdhcm4gJ0EgY2hhdmUgXCJpZVwiIG5hbyBleGlzdGUgbm8gbWFwYSBcIiRicm93c2VyLW1pbi12ZXJzaW9uXCIhJztcclxuICB9XHJcbn1cclxuIiwiLy8vIEVzdGUgbWl4aW4gYXRyaWJ1aSBhcyBwcm9wcmllZGFkZXMgbmVjZXNzw6FyaWFzIHBhcmEgcXVlIG9zIGVsZW1lbnRvcyBxdWVcclxuLy8vIHVzYW0gYSBmdW7Dp8OjbyBvdSBtaXhpbiBkZSBjb2x1bmFnZW0gZmlxdWVtIHVtIGFvIGxhZG8gZG8gb3V0cm8uIFVzYW1vc1xyXG4vLy8gZmxleGJveFxyXG4vLy9cclxuLy8vIEBncm91cCAgIE9iamVjdHMgW09iamV0b3NdXHJcbi8vL1xyXG4vLy8gQHBhcmFtICAge3N0cmluZ30gJGp1c3RpZnktY29udGVudCBbbnVsbF0gLSBEZXRlcm1pbmEgc2UgbyBjb250YWluZXIgdmFpXHJcbi8vLyAgICAgICAgICAgICAgICAgZGlzdHJpYnVpciBvIGVzcGHDp28gZXhpc3RlbnRlIGUgY29tbyBmYXLDoSBpc3RvIGRlIGFjb3JkbyBjb21cclxuLy8vICAgICAgICAgICAgICAgICBvcyB2YWxvcmVzIGRhIHByb3ByaWVkYWRlIGBqdXN0aWZ5LWNvbnRlbnRgIGRvIGZsZXhib3guXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3NlLXBhaS14IHtcclxuLy8vICAgICBAaW5jbHVkZSBmbGV4LWNvbnRhaW5lcjtcclxuLy8vICAgfVxyXG4vLy8gICAuY2xhc3NlLXBhaS15IHtcclxuLy8vICAgICBAaW5jbHVkZSBmbGV4LWNvbnRhaW5lcigkanVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuKTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmNsYXNzZS1wYWkteCB7XHJcbi8vLyAgICAgZGlzcGxheTogZmxleDtcclxuLy8vICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcclxuLy8vICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzZS1wYWkteSB7XHJcbi8vLyAgICAgZGlzcGxheTogZmxleDtcclxuLy8vICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcclxuLy8vICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbi8vLyAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBmbGV4LWNvbnRhaW5lcigkanVzdGlmeS1jb250ZW50OiBudWxsKSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcblxyXG4gIEBpZiAkanVzdGlmeS1jb250ZW50ICE9IG51bGwgYW5kIHR5cGUtb2YoJGp1c3RpZnktY29udGVudCkgIT0gc3RyaW5nIHtcclxuICAgIEB3YXJuICdPIHZhbG9yIGRlIFwiJGp1c3RpZnktY29udGVudFwiIGRldmUgc2VyIHVtYSBzdHJpbmcnO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAganVzdGlmeS1jb250ZW50OiAkanVzdGlmeS1jb250ZW50O1xyXG4gIH1cclxufVxyXG4iLCIvLy8gRXN0ZSBtaXhpbiBkaXZpZGUgYSBsYXJndXJhIGRvIGVsZW1lbnRvIGF0dWFsIGVtIGNvbHVuYXMgZGUgaWd1YWwgbGFyZ3VyYVxyXG4vLy8gZSBkZXRlcm1pbmEgYSBsYXJndXJhIGRvcyBlbGVtZW50b3MgZmlsaG9zIGRlIGFjb3JkbyBjb20gbyBzZWxldG9yIHBhc3NhZG9cclxuLy8vIGNvbW8gcGFyw6JtZXRyb1xyXG4vLy9cclxuLy8vIEBncm91cCAgIE9iamVjdHMgW09iamV0b3NdXHJcbi8vL1xyXG4vLy8gQHBhcmFtICAge251bWJlcn0gJGNvdW50IC0gUXVhbnRpZGFkZSBkZSBjb2x1bmFzIGVtIHF1ZSBvIGNvbnRhaW5lciBzZXJhXHJcbi8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXZpZGlkby4gRGV2ZSBzZXIgdW0gbsO6bWVybyBpbnRlaXJvLlxyXG4vLy8gQHBhcmFtICAge3N0cmluZ30gJGNoaWxkLXNlbGVjdG9yIC0gU2VsZXRvciBkb3MgZWxlbWVudG9zIGZpbGhvcyBhb3MgcXVhaXNcclxuLy8vICAgICAgICAgICAgICAgICAgIHNlcmEgYXRyaWJ1aWRhIGEgbGFyZ3VyYS5cclxuLy8vICAgICAgICAgICAgICAgICAgIEFjZWl0YSBxdWFscXVlciBzZWxldG9yIHBhZHLDo28gZG8gQ1NTLCBtYXMgc2UgcmVjb21lbmRhIG9cclxuLy8vICAgICAgICAgICAgICAgICAgIHVzbyBkZSBjbGFzc2VzIHBvciBxdWVzdMOjbyBkZSBwZXJmb3JtYW5jZVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgLmNvbXBvbmVudC14IHtcclxuLy8vICAgICBAaW5jbHVkZSBoYXMtYmxvY2tzKFxyXG4vLy8gICAgICAgJGNvdW50OiA0LFxyXG4vLy8gICAgICAgJGNoaWxkLXNlbGVjdG9yOiAnLmNsYXNzZS1xdWFscXVlcidcclxuLy8vICAgICApO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jb21wb25lbnQteiB7XHJcbi8vLyAgICAgQGluY2x1ZGUgaGFzLWJsb2NrcyhcclxuLy8vICAgICAgICRjb3VudDogMixcclxuLy8vICAgICAgICRjaGlsZC1zZWxlY3RvcjogJ1thdHJpYnV0by1xdWFscXVlcl0nXHJcbi8vLyAgICAgKTtcclxuLy8vICAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDb21waWxhZG9cclxuLy8vICAgLmNvbXBvbmVudC14IHtcclxuLy8vICAgICBkaXNwbGF5OiBmbGV4O1xyXG4vLy8gICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4vLy8gICAgIGZsZXgtd3JhcDogd3JhcDtcclxuLy8vICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbi8vLyAgIH1cclxuLy8vICAgLmNvbXBvbmVudC14IC5jbGFzc2UtcXVhbHF1ZXIge1xyXG4vLy8gICAgIHdpZHRoOiBjYWxjKCgxMDAlIC0gMy43NXJlbSkgLyA0KTtcclxuLy8vICAgfVxyXG4vLy8gICAuY29tcG9uZW50LXoge1xyXG4vLy8gICAgIGRpc3BsYXk6IGZsZXg7XHJcbi8vLyAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbi8vLyAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4vLy8gICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuLy8vICAgfVxyXG4vLy8gICAuY29tcG9uZW50LXogW2F0cmlidXRvLXF1YWxxdWVyXSB7XHJcbi8vLyAgICAgd2lkdGg6IGNhbGMoKDEwMCUgLSAxLjI1cmVtKSAvIDIpO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBoYXMtYmxvY2tzKCRjb3VudCwgJGNoaWxkLXNlbGVjdG9yKSB7XHJcbiAgQGlmIHR5cGUtb2YoJGNvdW50KSAhPSBudW1iZXIge1xyXG4gICAgQHdhcm4gJ08gdmFsb3IgYXRyaWJ1aWRvIGEgXCIkY291bnRcIiBwcmVjaXNhIHNlciB1bSBudW1lcm8nO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJGNvdW50OiByb3VuZCgkY291bnQpO1xyXG5cclxuICAgICRzcGFjZW1lbnQ6IHNwYWNlKGdyaWQpICogJGNvdW50O1xyXG4gICAgJGNvbHVtbi13aWR0aDogY2FsYygoMTAwJSAtICN7JHNwYWNlbWVudH0pIC8gI3skY291bnR9KTtcclxuXHJcbiAgICBAaW5jbHVkZSBncmlkLXdyYXBwZXI7XHJcblxyXG4gICAgI3skY2hpbGQtc2VsZWN0b3J9IHtcclxuICAgICAgd2lkdGg6ICRjb2x1bW4td2lkdGg7XHJcbiAgICAgIG1hcmdpbjoge1xyXG4gICAgICAgIHJpZ2h0OiBzcGFjZShncmlkKSAvIDI7XHJcbiAgICAgICAgbGVmdDogc3BhY2UoZ3JpZCkgLyAyO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLy8gRXN0ZSBtaXhpbiBhdHJpYnVpIGFzIHByb3ByaWVkYWRlcyBuZWNlc3PDoXJpYXMgcGFyYSBvIHdyYXBwZXIgZG8gZ3JpZFxyXG4vLy8gdXRpbGl6YWRvIHBlbG8gc2lzdGVtYVxyXG4vLy9cclxuLy8vIEBncm91cCAgIE9iamVjdHMgW09iamV0b3NdXHJcbi8vL1xyXG4vLy8gQHBhcmFtICAge3N0cmluZ30gJGp1c3RpZnktY29udGVudCBbbnVsbF0gLSBEZXRlcm1pbmEgc2UgbyBjb250YWluZXIgdmFpXHJcbi8vLyAgICAgICAgICAgICAgICAgZGlzdHJpYnVpciBvIGVzcGHDp28gZXhpc3RlbnRlIGUgY29tbyBmYXLDoSBpc3RvIGRlIGFjb3JkbyBjb21cclxuLy8vICAgICAgICAgICAgICAgICBvcyB2YWxvcmVzIGRhIHByb3ByaWVkYWRlIGBqdXN0aWZ5LWNvbnRlbnRgIGRvIGZsZXhib3guXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzb1xyXG4vLy8gICAuY2xhc3NlLXBhaS14IHtcclxuLy8vICAgICBAaW5jbHVkZSBncmlkLXdyYXBwZXI7XHJcbi8vLyAgIH1cclxuLy8vICAgLmNsYXNzZS1wYWkteSB7XHJcbi8vLyAgICAgQGluY2x1ZGUgZ3JpZC13cmFwcGVyKCRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4pO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENvbXBpbGFkb1xyXG4vLy8gICAuY2xhc3NlLXBhaS14IHtcclxuLy8vICAgICBkaXNwbGF5OiBmbGV4O1xyXG4vLy8gICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4vLy8gICAgIGZsZXgtd3JhcDogd3JhcDtcclxuLy8vICAgICBtYXJnaW4tcmlnaHQ6IC0wLjYyNXJlbTtcclxuLy8vICAgICBtYXJnaW4tbGVmdDogLTAuNjI1cmVtO1xyXG4vLy8gICB9XHJcbi8vLyAgIC5jbGFzc2UtcGFpLXkge1xyXG4vLy8gICAgIGRpc3BsYXk6IGZsZXg7XHJcbi8vLyAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbi8vLyAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4vLy8gICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuLy8vICAgICBtYXJnaW4tcmlnaHQ6IC0wLjYyNXJlbTtcclxuLy8vICAgICBtYXJnaW4tbGVmdDogLTAuNjI1cmVtO1xyXG4vLy8gICB9XHJcbkBtaXhpbiBncmlkLXdyYXBwZXIoJGp1c3RpZnktY29udGVudDogbnVsbCkge1xyXG4gIEBpbmNsdWRlIGZsZXgtY29udGFpbmVyKCRqdXN0aWZ5LWNvbnRlbnQ6ICRqdXN0aWZ5LWNvbnRlbnQpO1xyXG5cclxuICBtYXJnaW46IHtcclxuICAgIHJpZ2h0OiAtI3tzcGFjZShncmlkKSAvIDJ9O1xyXG4gICAgbGVmdDogLSN7c3BhY2UoZ3JpZCkgLyAyfTtcclxuICB9O1xyXG59XHJcbiIsIkBpbXBvcnQgJy4vc2V0dGluZ3MvYnJlYWtwb2ludHMnO1xyXG5AaW1wb3J0ICcuL3NldHRpbmdzL2Jyb3dzZXItbWluLXZlcnNpb24nO1xyXG5AaW1wb3J0ICcuL3NldHRpbmdzL2dyaWQnO1xyXG5AaW1wb3J0ICcuL3NldHRpbmdzL3NwYWNlcyc7XHJcbkBpbXBvcnQgJy4vc2V0dGluZ3Mvei1pbmRleCc7XHJcbkBpbXBvcnQgJy4vc2V0dGluZ3MvdWktY29sb3JzJztcclxuQGltcG9ydCAnLi9zZXR0aW5ncy9icmFuZC1jb2xvcnMnO1xyXG5AaW1wb3J0ICcuL3NldHRpbmdzL3VpLWZvbnRzJztcclxuQGltcG9ydCAnLi9zZXR0aW5ncy9icmFuZC1mb250cyc7XHJcbkBpbXBvcnQgJy4vc2V0dGluZ3MvZm9udC1zaXplcyc7XHJcbkBpbXBvcnQgJy4vc2V0dGluZ3MvaW5wdXQtdGV4dC1saWtlLXR5cGVzJztcclxuQGltcG9ydCAnLi9zZXR0aW5ncy9nbG9iYWwtY29uc3RhbnRzJztcclxuIiwiLy8vIE1hcGEgZGUgKmJyZWFrcG9pbnRzKiBwYXJhICptZWRpYSBxdWVyaWUqICh0cmFiYWxoYW1vcyBjb20gbyBjb25jZWl0byBkb1xyXG4vLy8gbW9iaWxlIGZpcnN0KVxyXG4vLy9cclxuLy8vICMjIyMgRGlzcG9zaXRpdm9zIHRlc3RhZG9zXHJcbi8vLyAgLSBzbWFsbCA9IDU2NnB4IC0gc21hcnRwaG9uZXMgKGxhbmRzY2FwZSlcclxuLy8vICAtIG1lZGl1bSA9IDc2OHB4IC0gaXBhZCwgbmV4dXMxMCwgaXBhZCBtaW5pIChwb3J0cmFpdClcclxuLy8vICAtIGxhcmdlID0gOTkycHggLSBpcGFkIChsYW5kc2NhcGUpLCBtb25pdG9yIDEwMjQrXHJcbi8vLyAgLSB4bGFyZ2UgPSAxMjAwcHggLSBpcGFkIFBybywgbW9uaXRvciAxMjgwK1xyXG4vLy8gIC0geHhsYXJnZSA9IDE2MDBweCAtIG1vbml0b3IgMTYwMCtcclxuLy8vIEBncm91cCAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiRicmVha3BvaW50czogKFxyXG4gIHNtYWxsOiA1NjZweCxcclxuICBtZWRpdW06IDc2OHB4LFxyXG4gIGxhcmdlOiA5OTJweCxcclxuICB4bGFyZ2U6IDEyMDBweCxcclxuICB4eGxhcmdlOiAxNjAwcHhcclxuKSAhZGVmYXVsdDtcclxuIiwiLy8vIENvbnN0YW50ZSB1dGlsaXphZGEgcGFyYSBjb25maWd1cmFyIG8gc3Vwb3J0ZSBtw61uaW1vIGRlIGJyb3dzZXIgdXRpbGl6YWRvXHJcbi8vLyBwb3IgZnVuw6fDtWVzICpoZWxwZXJzKiBlIGNvbXBvbmVudGVzXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4vLy8gQGFjY2VzcyAgcHJpdmF0ZVxyXG4kYnJvd3Nlci1taW4tdmVyc2lvbjogKFxyXG4gIGllOiAxMSxcclxuICBmaXJlZm94OiAzMVxyXG4pICFkZWZhdWx0O1xyXG4iLCIvLy8gTWFwYSBkZSBjb25maWd1cmHDp8OjbyBwYXJhIGNyaWHDp8OjbyBkbyAqZ3JpZCpcclxuLy8vIEBncm91cCAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiRncmlkOiAoXHJcbiAgY29sdW1uczogMTIsXHJcbiAgc3BhY2VtZW50OiAyMHB4LFxyXG4gIGZsZXgtc2l6ZTogKFxyXG4gICAgbWF4LXdpZHRoOiAxMDAlXHJcbiAgKSxcclxuICBmaXhlZC1zaXplOiAoXHJcbiAgICBtYXgtd2lkdGg6IDEwMHZ3XHJcbiAgKVxyXG4pICFkZWZhdWx0O1xyXG4iLCIvLy8gTWFwYSBkZSBjb25maWd1cmHDp8OjbyBkb3MgZXNwYcOnYW1lbnRvc1xyXG4vLy8gQGdyb3VwICAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiRzcGFjZXM6IChcclxuICB4c21hbGw6IDVweCxcclxuICBzbWFsbDogMTBweCxcclxuICBtZWRpdW06IDIwcHgsXHJcbiAgbGFyZ2U6IDMwcHgsXHJcbiAgeGxhcmdlOiA2MHB4XHJcbikgIWRlZmF1bHQ7XHJcbiIsIi8vLyBNYXBhIGRlIGNvbmZpZ3VyYcOnw6NvIGRhcyBjYW1hZGFzIHV0aWxpemFkYXNcclxuLy8vIEBncm91cCAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kei1pbmRleDogKFxyXG4gIGxvd2VzdDogLTksXHJcbiAgbG93OiAtMSxcclxuICBiYXNlOiA1LFxyXG4gIG1lZGl1bTogNTAsXHJcbiAgaGlnaDogOTMwLFxyXG4gIGhpZ2hlc3Q6IDk1MFxyXG4pICFkZWZhdWx0O1xyXG4iLCIvLy8gTWFwYSBkZSBjb3JlcyBwYWRyw6NvIGRhIGludGVyZmFjZSBVSSBlIHF1ZSBuw6NvIG11ZGFtIGRlIHVtYSAqKmJyYW5kKiogcGFyYVxyXG4vLy8gb3V0cmFcclxuLy8vXHJcbi8vLyBTZSBmb3IgbmVjZXNzw6FyaW8gYWRpY2lvbmFyIHZhcmlhw6fDtWVzIGRlIHVtYSBjb3IsIHV0aWxpemUgbWFwYXMgYW5pbmhhZG9zXHJcbi8vLyB1dGlsaXphbmRvIGNoYXZlcyBjb21vIG1vc3RyYWRvIGFiYWl4bzpcclxuLy8vICMjIyMgTW9kaWZpY2Fkb3JlcyByZWNvbWVuZGFkb3M6XHJcbi8vLyAgLSAqKmxpZ2h0ZXN0Kio6IGNvciBleHByZXNzYWRhIGVtIGZvcm1hdG8gYHJnYmAsIGByZ2JhYCwgYGhleGFgLCBgY29sb3IgbmFtZWAsIGV0Y1xyXG4vLy8gIC0gKipsaWdodGVyKio6ICBjb3IgZXhwcmVzc2FkYSBlbSBmb3JtYXRvIGByZ2JgLCBgcmdiYWAsIGBoZXhhYCwgYGNvbG9yIG5hbWVgLCBldGNcclxuLy8vICAtICoqbGlnaHQqKjogICAgY29yIGV4cHJlc3NhZGEgZW0gZm9ybWF0byBgcmdiYCwgYHJnYmFgLCBgaGV4YWAsIGBjb2xvciBuYW1lYCwgZXRjXHJcbi8vLyAgLSAqKmJhc2UqKjogICAgIGNvciBleHByZXNzYWRhIGVtIGZvcm1hdG8gYHJnYmAsIGByZ2JhYCwgYGhleGFgLCBgY29sb3IgbmFtZWAsIGV0Y1xyXG4vLy8gIC0gKiptZWRpdW0qKjogICBjb3IgZXhwcmVzc2FkYSBlbSBmb3JtYXRvIGByZ2JgLCBgcmdiYWAsIGBoZXhhYCwgYGNvbG9yIG5hbWVgLCBldGNcclxuLy8vICAtICoqZGFyayoqOiAgICAgY29yIGV4cHJlc3NhZGEgZW0gZm9ybWF0byBgcmdiYCwgYHJnYmFgLCBgaGV4YWAsIGBjb2xvciBuYW1lYCwgZXRjXHJcbi8vLyAgLSAqKmRhcmtlcioqOiAgIGNvciBleHByZXNzYWRhIGVtIGZvcm1hdG8gYHJnYmAsIGByZ2JhYCwgYGhleGFgLCBgY29sb3IgbmFtZWAsIGV0Y1xyXG4vLy8gIC0gKipkYXJrZXN0Kio6ICBjb3IgZXhwcmVzc2FkYSBlbSBmb3JtYXRvIGByZ2JgLCBgcmdiYWAsIGBoZXhhYCwgYGNvbG9yIG5hbWVgLCBldGNcclxuLy8vXHJcbi8vLyBAZ3JvdXAgICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgICR1aS1jb2xvcnM6IChcclxuLy8vICAgICB3YXJuaW5nOiAoXHJcbi8vLyAgICAgICBiYXNlOiAjRkZCRjAwLFxyXG4vLy8gICAgICAgbGlnaHQ6ICNGRkZEN0NcclxuLy8vICAgICApLFxyXG4vLy8gICAgIGVycm9yOiAjZGQwMDAwLFxyXG4vLy8gICAgIHN1Y2Nlc3M6ICM4RkZGNDksXHJcbi8vLyAgICAgbGlnaHQ6IChcclxuLy8vICAgICAgIGxpZ2h0ZXN0OiAjZmZmLFxyXG4vLy8gICAgICAgbGlnaHRlcjogICNmOGY4ZjgsXHJcbi8vLyAgICAgICBiYXNlOiAgICAgI2Y0ZjRmNCxcclxuLy8vICAgICAgIG1lZGl1bTogICAjZWVlZGViXHJcbi8vLyAgICAgKSxcclxuLy8vICAgICBkYXJrOiAjMDAwXHJcbi8vLyAgICk7XHJcbiR1aS1jb2xvcnM6IChcclxuICBsaWdodDogKFxyXG4gICAgYmFzZTogI2ZmZixcclxuICAgIGRhcms6ICNmMGYwZjBcclxuICApLFxyXG4gIGRhcms6IChcclxuICAgIGJhc2U6ICMzMzMsXHJcbiAgICBkYXJrZXN0OiAjMDAwMDAwLFxyXG4gICAgbGlnaHQ6ICNhYmFiYWIsXHJcbiAgICBtZWRpdW06ICM2NjZcclxuICApXHJcbikgIWRlZmF1bHQ7XHJcbiIsIi8vLyBNYXBhIGRlIGNvcmVzIGRhICoqQnJhbmQqKlxyXG4vLy9cclxuLy8vIFNlIGZvciBuZWNlc3PDoXJpbyBhZGljaW9uYXIgdmFyaWHDp8O1ZXMgZGUgdW1hIGNvciwgdXRpbGl6ZSBtYXBhcyBhbmluaGFkb3NcclxuLy8vIHV0aWxpemFuZG8gY2hhdmVzIGNvbW8gbW9zdHJhZG8gYWJhaXhvOlxyXG4vLy8gIyMjIyBNb2RpZmljYWRvcmVzIHJlY29tZW5kYWRvczpcclxuLy8vICAtICoqbGlnaHRlc3QqKjogY29yIGV4cHJlc3NhZGEgZW0gZm9ybWF0byBgcmdiYCwgYHJnYmFgLCBgaGV4YWAsIGBjb2xvciBuYW1lYCwgZXRjXHJcbi8vLyAgLSAqKmxpZ2h0ZXIqKjogIGNvciBleHByZXNzYWRhIGVtIGZvcm1hdG8gYHJnYmAsIGByZ2JhYCwgYGhleGFgLCBgY29sb3IgbmFtZWAsIGV0Y1xyXG4vLy8gIC0gKipsaWdodCoqOiAgICBjb3IgZXhwcmVzc2FkYSBlbSBmb3JtYXRvIGByZ2JgLCBgcmdiYWAsIGBoZXhhYCwgYGNvbG9yIG5hbWVgLCBldGNcclxuLy8vICAtICoqYmFzZSoqOiAgICAgY29yIGV4cHJlc3NhZGEgZW0gZm9ybWF0byBgcmdiYCwgYHJnYmFgLCBgaGV4YWAsIGBjb2xvciBuYW1lYCwgZXRjXHJcbi8vLyAgLSAqKm1lZGl1bSoqOiAgIGNvciBleHByZXNzYWRhIGVtIGZvcm1hdG8gYHJnYmAsIGByZ2JhYCwgYGhleGFgLCBgY29sb3IgbmFtZWAsIGV0Y1xyXG4vLy8gIC0gKipkYXJrKio6ICAgICBjb3IgZXhwcmVzc2FkYSBlbSBmb3JtYXRvIGByZ2JgLCBgcmdiYWAsIGBoZXhhYCwgYGNvbG9yIG5hbWVgLCBldGNcclxuLy8vICAtICoqZGFya2VyKio6ICAgY29yIGV4cHJlc3NhZGEgZW0gZm9ybWF0byBgcmdiYCwgYHJnYmFgLCBgaGV4YWAsIGBjb2xvciBuYW1lYCwgZXRjXHJcbi8vLyAgLSAqKmRhcmtlc3QqKjogIGNvciBleHByZXNzYWRhIGVtIGZvcm1hdG8gYHJnYmAsIGByZ2JhYCwgYGhleGFgLCBgY29sb3IgbmFtZWAsIGV0Y1xyXG4vLy9cclxuLy8vIEBncm91cCAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgJGJyYW5kLWNvbG9yczogKFxyXG4vLy8gICAgIHByaW1hcnk6ICNlZDY2NTUsXHJcbi8vLyAgICAgc2Vjb25kYXJ5OiAjZWI0NzY2LFxyXG4vLy8gICAgIG5vcm1hbDogI2I5YjliOSxcclxuLy8vICAgICBncmFkaWVudDogKFxyXG4vLy8gICAgICAgbGlnaHQ6ICNlZDY2NTUsXHJcbi8vLyAgICAgICBkYXJrOiAjZWI0NzY2XHJcbi8vLyAgICAgKVxyXG4vLy8gICApO1xyXG4kYnJhbmQtY29sb3JzOiAoXHJcbiAgcHJpbWFyeTogKFxyXG4gICAgYmFzZTogI2ZkYzIwMCxcclxuICAgIGxpZ2h0OiAjZjRkMTFlXHJcbiAgKSxcclxuICBzZWNvbmRhcnk6ICMzMzMzMzNcclxuKSAhZGVmYXVsdDtcclxuIiwiLy8vIE1hcGEgZGUgZm9udGVzIGRhIEJyYW5kXHJcbi8vLyBTZSBmb3IgdXRpbGl6YXIgXCJmb250ZXMgcGFkcsOjbyBkZSBTT1wiIGNvbW8gYEFyaWFsYCwgYEhlbHZldGljYWAsIGV0Yy5cclxuLy8vIGVudMOjbyBhIGNoYXZlIGBwYXRoYCBwcmVjaXNhIHRlciBvIHZhbG9yIGBudWxsYFxyXG4vLy9cclxuLy8vICoqTGVtYnJlLXNlKiogcXVlIG8gYHBhdGhgIMOpIHJlbGF0aXZvIGFvIGFycXVpdm8gYG1haW4uc2Nzc2AuXHJcbi8vLyBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9wdC1CUi9kb2NzL1dlYi9DU1MvZm9udC13ZWlnaHQjTWFwZWFtZW50b19kZV9ub21lc19jb211bnNfZGVfcGVzb3NcclxuLy8vXHJcbi8vLyBAZ3JvdXAgICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNvXHJcbi8vLyAgICR1aS1mb250czogKFxyXG4vLy8gICAgIGN1c3RvbS1mb250OiAoXHJcbi8vLyAgICAgICBuYW1lOiAnRHJvaWRTZXJpZicsXHJcbi8vLyAgICAgICBwYXRoOiAnLi4vZm9udHMvRHJvaWRTZXJpZi1SZWd1bGFyLXdlYmZvbnQudHRmJyxcclxuLy8vICAgICAgIHdlaWdodDogNDAwLFxyXG4vLy8gICAgICAgc3R5bGU6IG5vcm1hbFxyXG4vLy8gICAgICksXHJcbi8vLyAgICAgLy8gUGFyYSBtZWxob3IgcGVyZm9ybWFuY2UgZSB1c2FiaWxpZGFkZSwgc2VtcHJlIG1hbnRlbmhhIG8gbWVzbW8gYG5vbWVgXHJcbi8vLyAgICAgLy8gcXVhbmRvIGZvciBhIG1lc21hIGZvbnRlIG1hcyBjb20gb3V0cm8gcGVzby9lc3RpbG8sIG91IGFtYm9zXHJcbi8vLyAgICAgY3VzdG9tLWl0YWxpYzogKFxyXG4vLy8gICAgICAgbmFtZTogJ0Ryb2lkU2VyaWYnLFxyXG4vLy8gICAgICAgcGF0aDogJy4uL2ZvbnRzL0Ryb2lkU2VyaWYtSXRhbGljLXdlYmZvbnQnLFxyXG4vLy8gICAgICAgd2VpZ2h0OiBub3JtYWwsXHJcbi8vLyAgICAgICBzdHlsZTogaXRhbGljXHJcbi8vLyAgICAgKVxyXG4vLy8gICApO1xyXG4kdWktZm9udHM6IChcclxuICBiYXNlOiAoXHJcbiAgICBuYW1lOiAjeydMYXRvJywgc2Fucy1zZXJpZn0sXHJcbiAgICBwYXRoOiBudWxsLFxyXG4gICAgd2VpZ2h0OiA0MDAsXHJcbiAgICBzdHlsZTogbm9ybWFsXHJcbiAgKSxcclxuICBoaWdobGlnaHQ6IChcclxuICAgIG5hbWU6ICN7J09zd2FsZCcsIHNhbnMtc2VyaWZ9LFxyXG4gICAgcGF0aDogbnVsbCxcclxuICAgIHdlaWdodDogNTAwLFxyXG4gICAgc3R5bGU6IG5vcm1hbFxyXG4gICksXHJcbiAgYm9sZDogKFxyXG4gICAgbmFtZTogI3snT3N3YWxkJywgc2Fucy1zZXJpZn0sXHJcbiAgICBwYXRoOiBudWxsLFxyXG4gICAgd2VpZ2h0OiA3MDAsXHJcbiAgICBzdHlsZTogbm9ybWFsXHJcbiAgKVxyXG4pICFkZWZhdWx0O1xyXG4iLCIvLy8gTWFwYSBkZSBmb250ZXMgZGEgKipCcmFuZCoqXHJcbi8vL1xyXG4vLy8gU2UgZm9yIHV0aWxpemFyIFwiZm9udGVzIHBhZHLDo28gZGUgU09cIiBjb21vIGBBcmlhbGAsIGBIZWx2ZXRpY2FgLCBldGMuXHJcbi8vLyBlbnTDo28gYSBjaGF2ZSBgcGF0aGAgcHJlY2lzYSB0ZXIgbyB2YWxvciBgbnVsbGBcclxuLy8vXHJcbi8vLyAqKkxlbWJyZS1zZSoqIHF1ZSBvIGBwYXRoYCDDqSByZWxhdGl2byBhbyBhcnF1aXZvIGBtYWluLnNjc3NgLlxyXG4vLy9cclxuLy8vIEBsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3B0LUJSL2RvY3MvV2ViL0NTUy9mb250LXdlaWdodCNNYXBlYW1lbnRvX2RlX25vbWVzX2NvbXVuc19kZV9wZXNvc1xyXG4vLy9cclxuLy8vIEBncm91cCAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBVc29cclxuLy8vICAgJGJyYW5kLWZvbnRzOiAoXHJcbi8vLyAgICAgY3VzdG9tLWZvbnQ6IChcclxuLy8vICAgICAgIG5hbWU6ICdEcm9pZFNlcmlmJyxcclxuLy8vICAgICAgIHBhdGg6ICcvYXNzZXRzL2ZvbnRzL0Ryb2lkU2VyaWYtUmVndWxhci13ZWJmb250LnR0ZicsXHJcbi8vLyAgICAgICB3ZWlnaHQ6IDQwMCxcclxuLy8vICAgICAgIHN0eWxlOiBub3JtYWxcclxuLy8vICAgICApLFxyXG4vLy8gICAgIC8vIFBhcmEgbWVsaG9yIHBlcmZvcm1hbmNlIGUgdXNhYmlsaWRhZGUsIHNlbXByZSBtYW50ZW5oYSBvIG1lc21vIGBub21lYFxyXG4vLy8gICAgIC8vIHF1YW5kbyBmb3IgYSBtZXNtYSBmb250ZSBtYXMgY29tIG91dHJvIHBlc28vZXN0aWxvLCBvdSBhbWJvc1xyXG4vLy8gICAgIGN1c3RvbS1pdGFsaWM6IChcclxuLy8vICAgICAgIG5hbWU6ICdEcm9pZFNlcmlmJyxcclxuLy8vICAgICAgIHBhdGg6ICcvYXNzZXRzL2ZvbnRzL0Ryb2lkU2VyaWYtSXRhbGljLXdlYmZvbnQnLFxyXG4vLy8gICAgICAgd2VpZ2h0OiBub3JtYWwsXHJcbi8vLyAgICAgICBzdHlsZTogaXRhbGljXHJcbi8vLyAgICAgKVxyXG4vLy8gICApO1xyXG4kYnJhbmQtZm9udHM6IChcclxuICBtYWluOiAoXHJcbiAgICBuYW1lOiBudWxsLFxyXG4gICAgcGF0aDogbnVsbCxcclxuICAgIHdlaWdodDogbnVsbCxcclxuICAgIHN0eWxlOiBudWxsLFxyXG4gIClcclxuKSAhZGVmYXVsdDtcclxuIiwiLy8vIE1hcGEgZGUgdGFtYW5ob3MgZGUgZm9udGVzIGRhIGFwbGljYcOnw6NvXHJcbi8vLyBBbnRlcyBkZSBjcmlhciB1bSBub3ZvIHBhZHLDo28sIHZlcmlmaXF1ZSBxdWUgcmVhbG1lbnRlIMOpIG5lY2Vzc8OhcmlvXHJcbi8vL1xyXG4vLy8gQGdyb3VwICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuJGZvbnQtc2l6ZXM6IChcclxuICB4eHNtYWxsOiAxMHB4LFxyXG4gIHhzbWFsbDogMTJweCxcclxuICBzbWFsbDogMTRweCxcclxuICBtZWRpdW06IDE2cHgsXHJcbiAgbGFyZ2U6IDIwcHgsXHJcbiAgeGxhcmdlOiAyN3B4LFxyXG4gIHh4bGFyZ2U6IDM0cHhcclxuKSAhZGVmYXVsdDtcclxuIiwiLy8vIExpc3RhIGNvbSB0aXBvcyBkZSBpbnB1dCBxdWUgcGFyZWNlbSB2aXN1YWxtZW50ZSBjb20gaW5wdXRzIGRvIHRpcG8gdGV4dG9cclxuLy8vIEBncm91cCAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiRpbnB1dC10ZXh0LWxpa2UtdHlwZXM6IChcclxuICAndGV4dCcsXHJcbiAgJ3Bhc3N3b3JkJyxcclxuICAndXJsJyxcclxuICAnZW1haWwnLFxyXG4gICd0ZWwnLFxyXG4gICdzZWFyY2gnLFxyXG4gICdudW1iZXInLFxyXG4gICdkYXRlJyxcclxuICAnbW9udGgnLFxyXG4gICd3ZWVrJyxcclxuICAnZGF0ZXRpbWUnLFxyXG4gICdkYXRldGltZS1sb2NhbCdcclxuKSAhZGVmYXVsdDtcclxuIiwiLy8vIENvbnN0YW50ZSB1dGlsaXphZGEgcGFyYSBmYWNpbGl0YXIgYSBjb252ZXJzw6NvIGRlIHVuaWRhZGVzIGRlIG1lZGlkYVxyXG4vLy9cclxuLy8vIFBhcmEgYXRyaWJ1aXIgdW0gbm92byB2YWxvciwgZmHDp2EtbyBubyBhcnF1aXZvIGBfc2V0dGluZ3Muc2Nzc2AgZG8gcHJvamV0b1xyXG4vLy8gQGdyb3VwICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuJGZvbnQtc2l6ZS1iYXNlOiAxNnB4ICFkZWZhdWx0O1xyXG5cclxuLy8vIENvbnN0YW50ZSB1dGlsaXphZGEgcGFyYSBkZXRlcm1pbmFyIG8gbGluZS1oZWlnaHQgcGFkcsOjbyBkbyBib2R5XHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kbGluZS1oZWlnaHQtYmFzZTogMS4yNSAhZGVmYXVsdDtcclxuXHJcbi8vLyBDb25zdGFudGUgdXRpbGl6YWRhIHBhcmEgdHJvY2FyIGNvbmZpZ3VyYcOnw7VlcyBkZSBhY29yZG8gY29tIGEgQnJhbmRcclxuLy8vIEBncm91cCAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiRicmFuZDogbnVsbCAhZGVmYXVsdDtcclxuJGJyYW5kLW5hbWU6IG51bGwgIWRlZmF1bHQ7XHJcblxyXG4vLy8gQ29uc3RhbnRlcyB1dGlsaXphZGFzIHBhcmEgYXMgY29uZmlndXJhw6fDtWVzIGRlIGZvbnRlc1xyXG4vLy8gQGdyb3VwICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuJGZvbnQtZmFsbGJhY2s6IFRhaG9tYSwgVmVyZGFuYSwgU2Vnb2UsIHNhbnMtc2VyaWYgIWRlZmF1bHQ7XHJcblxyXG4vLy8gQ29uc3RhbnRlIHF1ZSBnZXJhIHVtIG1hcGEgcGFyYSBzZXIgdXRpbGl6YWRvIHBlbGFzIGZlcnJhbWVudGFzIGRlIGZvbnRlXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kZm9udHM6IG1hcC1tZXJnZSgkdWktZm9udHMsICRicmFuZC1mb250cykgIWRlZmF1bHQ7XHJcblxyXG4vLy8gTG9jYWxpemHDp8OjbyBkYXMgaW1hZ2VucyBjb20gcmVzcGVpdG8gYW8gQ1NTIGNvbXBpbGFkb1xyXG4vLy8gQGdyb3VwICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuJGltYWdlcy1wYXRoOiAnLi4vaW1hZ2VzJyAhZGVmYXVsdDtcclxuXHJcbi8vLyBMb2NhbGl6YcOnw6NvIGRvIHNwcml0ZS1zdmcgY29tIHJlc3BlaXRvIGFvIENTUyBjb21waWxhZG9cclxuLy8vIEBncm91cCAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiRzdmctc3ByaXRlLXBhdGg6ICcuLi9pbWFnZXMnICFkZWZhdWx0O1xyXG5cclxuLy8vIEVzcGVzc3VyYSBkZSBib3JkYSBwYWRyw6NvXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kYm9yZGVyLXdpZHRoLWJhc2U6IHJlbSgxcHgpICFkZWZhdWx0O1xyXG5cclxuLy8vIENvciBkZSBib3JkYSBwYWRyw6NvXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kYm9yZGVyLWNvbG9yLWJhc2U6IGNvbG9yKGRhcmspICFkZWZhdWx0O1xyXG5cclxuLy8vIEVzdGlsbyBkZSBib3JkYSBwYWRyw6NvXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kYm9yZGVyLXN0eWxlLWJhc2U6ICRib3JkZXItd2lkdGgtYmFzZSBzb2xpZCAkYm9yZGVyLWNvbG9yLWJhc2UgIWRlZmF1bHQ7XHJcblxyXG4vLy8gQ29uc3RhbnRlIHBhZHLDo28gcGFyYSBib3JkYXMgYXJyZWRvbmRhZGFzXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kYm9yZGVyLXJhZGl1cy1iYXNlOiByZW0oNHB4KSAhZGVmYXVsdDtcclxuXHJcbi8vLyBTb21icmEgcGFkcsOjbyBwYXJhIGVsZW1lbnRvc1xyXG4vLy8gQGdyb3VwICAgU2V0dGluZ3MgW0NvbmZpZ3VyYcOnw7Vlc11cclxuJHNoYWRvdy1iYXNlOiByZW0oMXB4KSByZW0oMXB4KSByZW0oM3B4KSBjb2xvcihkYXJrLCBkYXJrZXN0KSAhZGVmYXVsdDtcclxuXHJcbi8vLyBMYXJndXJhIGJhc2UgcGFyYSBjb252ZXJzw6NvIGRlIG1lZGlkYXMgYmFzZWFkYXMgbm8gbGF5b3V0IGRvIHByb3TDs3RpcG9cclxuLy8vIEBncm91cCAgIFNldHRpbmdzIFtDb25maWd1cmHDp8O1ZXNdXHJcbiR2aWV3LXdpZHRoLWJhc2U6IDEwMjRweCAhZGVmYXVsdDtcclxuXHJcbi8vLyBPcGFjaWRhZGUgcGFkcsOjbyBwYXJhIGVsZW1lbnRvcyBkZXNhYmlsaXRhZG9zXHJcbi8vLyBAZ3JvdXAgICBTZXR0aW5ncyBbQ29uZmlndXJhw6fDtWVzXVxyXG4kZGlzYWJsZWQtb3BhY2l0eTogLjcgIWRlZmF1bHQ7XHJcbiIsIiIsIi8vIEZvbGhhIGRlIGVzdGlsb3MgcGFyYSAqcmVzZXQqXHJcbi8vIEVzdGEgZm9saGEgZGUgZXN0aWxvcyByZWRlZmluZSBvcyBlc3RpbG9zIHBhZHLDtWVzIGRlIHRvZGFzIGFzIHRhZ3MgcGFyYSB0b2Rvc1xyXG4vLyBvcyBuYXZlZ2Fkb3Jlc1xyXG4vLyBFc3RlIHJlc2V0IMOpIGJlbSAqaGFyZCBjb3JlKiBlIGEgaWRlaWEgw6kgZXhhdGFtZW50ZSBlc3NhID1QXHJcbi8vIEJhc2VhZG8gbm8gdHJhYmFsaG8gZGUgRXJpYyBNZXllciwgUmljaGFyZCBDbGFyayBlIGFsZ3VtYXMgZXhwZXJpZW5jaWFzXHJcbi8vIHBlc3NvYWlzXHJcbi8vIEBzZWUgICAgIGh0dHA6IC8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xyXG4vLyBAc2VlICAgICBodHRwczogLy9jb2RlLmdvb2dsZS5jb20vcC9odG1sNXJlc2V0Y3NzL1xyXG4vLyBAdmVyc2lvbiAyLjRcclxuLy8gc2Fzcy1saW50OmRpc2FibGUgc2luZ2xlLWxpbmUtcGVyLXNlbGVjdG9yXHJcbi8vIHNhc3MtbGludDpkaXNhYmxlIG5vLXZlbmRvci1wcmVmaXhlc1xyXG5odG1sLCBib2R5LCBtYWluLCBhcnRpY2xlLCBuYXYsIGFzaWRlLCBzZWN0aW9uLFxyXG5oZWFkZXIsIGZvb3RlciwgYWRkcmVzcywgZGl2LFxyXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBvbCwgdWwsIGxpLCBkbCwgZHQsIGRkLFxyXG5ociwgcHJlLCBmaWd1cmUsIGZpZ2NhcHRpb24sXHJcbnRhYmxlLCBjYXB0aW9uLCB0aGVhZCwgdGJvZHksIHRmb290LCB0ciwgdGgsIHRkLCBjb2wsIGNvbGdyb3VwLFxyXG5mb3JtLCBmaWVsZHNldCwgbGVnZW5kLCBsYWJlbCwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0LCBkYXRhbGlzdCxcclxub3B0Z3JvdXAsIG9wdGlvbiwgdGV4dGFyZWEsIHByb2dyZXNzLCBtZXRlcixcclxuaW1nLCBpZnJhbWUsIGVtYmVkLCBvYmplY3QsIHBhcmFtLCB2aWRlbywgYXVkaW8sIHNvdXJjZSxcclxuY2FudmFzLCB0cmFjaywgbWFwLCBhcmVhLCBkZWwsIGlucyxcclxuYSwgZW0sIHN0cm9uZywgaSwgYiwgdSwgcywgc21hbGwsIGFiYnIsIHEsIGNpdGUsIGRmbiwgc3ViLCBzdXAsXHJcbnRpbWUsIGNvZGUsIGtiZCwgc2FtcCwgdmFyLCBiZGksIGJkbywgcnVieSwgcnQsIHJwLCB3YnIsXHJcbm1hcmssIHNwYW4sIGJyIHtcclxuICBwYWRkaW5nOiAwO1xyXG4gIG1hcmdpbjogMDtcclxuICBmb250OiB7XHJcbiAgICBzaXplOiAxMDAlO1xyXG4gICAgc3R5bGU6IG5vcm1hbDtcclxuICAgIHdlaWdodDogbm9ybWFsO1xyXG4gIH07XHJcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xyXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbmJ1dHRvbixcclxuc2VsZWN0LFxyXG50ZXh0YXJlYSxcclxuaW5wdXQge1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICBjb2xvcjogaW5oZXJpdDtcclxuICBmb250LWZhbWlseTogaW5oZXJpdDtcclxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gICY6Oi1tb3otZm9jdXMtaW5uZXIge1xyXG4gICAgYm9yZGVyOiAwO1xyXG4gIH1cclxufVxyXG5cclxuYSB7XHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG59XHJcblxyXG5pbWcsXHJcbnN2ZyB7XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIGJvcmRlcjogMDtcclxuXHJcbiAgYSAmIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gIH1cclxufVxyXG5cclxudWwsXHJcbm9sIHtcclxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbn1cclxuXHJcbmhyIHtcclxuICBib3JkZXI6IDA7XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xyXG59XHJcblxyXG5jYXB0aW9uLFxyXG50aCxcclxudGQge1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbn1cclxuXHJcbjo6YWZ0ZXIsXHJcbjo6YmVmb3JlIHtcclxuICBib3gtc2l6aW5nOiBpbmhlcml0O1xyXG59XHJcblxyXG5pbnB1dCxcclxuc2VsZWN0LFxyXG50ZXh0YXJlYSB7XHJcbiAgJjotd2Via2l0LWF1dG9maWxsIHtcclxuICAgIHRyYW5zaXRpb24tZGVsYXk6IDk5OTk5OXM7XHJcbiAgfVxyXG59XHJcbiIsIkBtaXhpbiBzZXBhcmF0b3IoJGNvbG9yLWEsICRjb2xvci1iKSB7XHJcbiAgJHRoaXMtYm9yZGVyLXdpZHRoOiByZW0oM3B4KTtcclxuXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIG1hcmdpbi10b3A6IHNwYWNlKHhsYXJnZSk7XHJcbiAgcGFkZGluZy10b3A6IHNwYWNlKHhsYXJnZSk7XHJcblxyXG4gICY6OmJlZm9yZSxcclxuICAmOjphZnRlciB7XHJcbiAgICBAaW5jbHVkZSBjc3MtY29udGVudCgzMHZ3LCAkdGhpcy1ib3JkZXItd2lkdGgpO1xyXG5cclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICB9XHJcblxyXG4gICY6OmJlZm9yZSB7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItYTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtODAlKTtcclxuICB9XHJcblxyXG4gICY6OmFmdGVyIHtcclxuICAgIHRvcDogJHRoaXMtYm9yZGVyLXdpZHRoICoyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWI7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTI1JSk7XHJcbiAgfVxyXG59XHJcbiIsIi5jb3ZlciB7XHJcbiAgYmFja2dyb3VuZDoge1xyXG4gICAgaW1hZ2U6IHVybCguLi9pbWFnZXMvYmFja2dyb3VuZHMvc2FvLWNhZXRhbm8tZG8tc3VsLmpwZyk7XHJcbiAgICBzaXplOiBjb3ZlcjtcclxuICAgIHJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgY29sb3I6IHJnYmEoY29sb3IoZGFyaywgZGFya2VzdCksIC4zKTtcclxuICB9O1xyXG4gIGNvbG9yOiBjb2xvcihsaWdodCk7XHJcblxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB6LWluZGV4OiBsYXllcihoaWdoKTtcclxuXHJcbiAgbWluLWhlaWdodDogMTAwdmg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgYmFja2dyb3VuZDoge1xyXG4gICAgICAvLyBpbWFnZTogdXJsKC4uL2ltYWdlcy9iYWNrZ3JvdW5kcy9zYW8tYmVybmFyZG8tZG8tY2FtcG8uanBnKTtcclxuICAgICAgc2l6ZTogYXV0bztcclxuICAgICAgcG9zaXRpb246IGJvdHRvbSByaWdodDtcclxuICAgICAgY29sb3I6IHJnYmEoY29sb3IoZGFyaywgZGFya2VzdCksIC4zKTtcclxuICAgIH07XHJcblxyXG4gICAgaGVpZ2h0OiAxMDB2aDtcclxuICB9XHJcblxyXG4gICY6OmJlZm9yZSxcclxuICAmOjphZnRlciB7XHJcbiAgICBAaW5jbHVkZSBjc3MtY29udGVudCgxMDAlLCAxMDB2aCk7XHJcblxyXG4gICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6IGxheWVyKGxvdyk7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICBiYWNrZ3JvdW5kOiB7XHJcbiAgICAgIHNpemU6IGNvdmVyO1xyXG4gICAgICByZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICY6OmJlZm9yZSB7XHJcbiAgICB0cmFuc2Zvcm06IHNrZXdZKDEzZGVnKSB0cmFuc2xhdGVZKC02M3ZoKTtcclxuXHJcbiAgICBiYWNrZ3JvdW5kOiB7XHJcbiAgICAgIC8vIGltYWdlOiB1cmwoLi4vaW1hZ2VzL2JhY2tncm91bmRzL3NhbnRvLWFuZHJlLmpwZyk7XHJcbiAgICAgIC8vIGltYWdlOiB1cmwoLi4vaW1hZ2VzL2JhY2tncm91bmRzL3Nhby1iZXJuYXJkby1kby1jYW1wby5qcGcpO1xyXG4gICAgICBjb2xvcjogcmdiYShjb2xvcihsaWdodCksIC41KTtcclxuICAgICAgcG9zaXRpb246IDcwJSAwO1xyXG4gICAgfTtcclxuICAgIG9wYWNpdHk6IC43O1xyXG4gIH1cclxuXHJcbiAgJjo6YWZ0ZXIge1xyXG4gICAgLy8gYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ltYWdlcy9iYWNrZ3JvdW5kcy9zYW8tY2FldGFuby1kby1zdWwuanBnKTtcclxuICAgIHRyYW5zZm9ybTogc2tld1koLTE1ZGVnKSB0cmFuc2xhdGVZKC0yOHZoKTtcclxuICAgIGJhY2tncm91bmQ6IHtcclxuICAgICAgY29sb3I6IHJnYmEoY29sb3IoZGFyaywgZGFya2VzdCksIC4zKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAuc29jaWFsLW1lZGlhIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogc3BhY2UobWVkaXVtKTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG5cclxuICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLmhhc2h0YWdzIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcblxyXG4gICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDUwJTtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIG1heC13aWR0aDogMzUlO1xyXG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuXHJcbiAgICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKGxhcmdlKSAqIDI7XHJcblxyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHJnYmEoY29sb3IoZGFyaywgZGFya2VzdCksIC40KTtcclxuICAgICAgcGFkZGluZzogc3BhY2Uoc21hbGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGEge1xyXG4gICAgICB0ZXh0LXNoYWRvdzogJHNoYWRvdy1iYXNlO1xyXG4gICAgICBjb2xvcjogY29sb3IobGlnaHQpO1xyXG4gICAgICBib3JkZXItY29sb3I6IGNvbG9yKHByaW1hcnkpO1xyXG5cclxuICAgICAgJiArIGEge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IHNwYWNlKHhzbWFsbCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICY6aG92ZXIsXHJcbiAgICAgICY6Zm9jdXMge1xyXG4gICAgICAgIHRleHQtc2hhZG93OiBub25lO1xyXG4gICAgICAgIGNvbG9yOiBjb2xvcihkYXJrLCBkYXJrZXN0KTtcclxuICAgICAgICBib3JkZXItY29sb3I6IGNvbG9yKGRhcmssIGRhcmtlc3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAud3JhcHBlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG5cclxuICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgei1pbmRleDogbGF5ZXIobWVkaXVtKTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aW1lIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWFyZ2luOiB7XHJcbiAgICAgIHRvcDogc3BhY2UobGFyZ2UpO1xyXG4gICAgICBib3R0b206IHNwYWNlKGxhcmdlKTtcclxuICAgIH1cclxuXHJcbiAgICBmb250LXNpemU6IGZvbnQtc2l6ZSh4eGxhcmdlKTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6IGNvbG9yKHByaW1hcnkpO1xyXG4gICAgdGV4dC1zaGFkb3c6ICRzaGFkb3ctYmFzZTtcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IHNwYWNlKG1lZGl1bSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogc3BhY2UoeGxhcmdlKTtcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IHNwYWNlKG1lZGl1bSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAubG9nbyB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICB3aWR0aDogNTAlO1xyXG4gICAgbWF4LXdpZHRoOiAzMzBweDtcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIG1hcmdpbjogc3BhY2UobGFyZ2UpIGF1dG87XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICBpbWcge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIHotaW5kZXg6IGxheWVyKG1lZGl1bSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuaW50cm8ge1xyXG4gICAgY29sb3I6IGNvbG9yKGxpZ2h0KTtcclxuICAgIHRleHQtc2hhZG93OiAkc2hhZG93LWJhc2U7XHJcblxyXG4gICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgIHRvcDogNDglO1xyXG4gICAgICBsZWZ0OiAwO1xyXG4gICAgICB3aWR0aDogNTAlO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgICB9XHJcblxyXG4gICAgaDEge1xyXG4gICAgICBtYXJnaW46IHNwYWNlKGxhcmdlKSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGgyIHtcclxuICAgICAgY29sb3I6IGNvbG9yKGxpZ2h0KTtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgbWFyZ2luOiBzcGFjZShsYXJnZSkgMDtcclxuXHJcbiAgICAgICY6OmJlZm9yZSxcclxuICAgICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6IG5vbmU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5idXkge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWFyZ2luOiBzcGFjZShsYXJnZSkgYXV0bztcclxuICAgICAgcGFkZGluZzogc3BhY2Uoc21hbGwpO1xyXG5cclxuICAgICAgd2lkdGg6IHJlbSgyMDBweCk7XHJcblxyXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvcihwcmltYXJ5KTtcclxuICAgICAgYm94LXNoYWRvdzogcmVtKDFweCkgcmVtKDFweCkgcmVtKDVweCkgY29sb3IoZGFyayk7XHJcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzLWJhc2U7XHJcbiAgICAgIGNvbG9yOiBjb2xvcihkYXJrLCBkYXJrZXN0KTtcclxuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgIGJvcmRlcjogMDtcclxuXHJcbiAgICAgICY6aG92ZXIsXHJcbiAgICAgICY6Zm9jdXMge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0ZW4oY29sb3IocHJpbWFyeSksIDM1KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJjphY3RpdmUge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbihjb2xvcihwcmltYXJ5KSwgMzUpO1xyXG4gICAgICAgIGNvbG9yOiBjb2xvcihsaWdodCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5pcy1maXhlZCB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiA1MCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IHNwYWNlKHNtYWxsKSA2LjI1dnc7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XHJcblxyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IobGlnaHQpO1xyXG4gICAgYm94LXNoYWRvdzogJHNoYWRvdy1iYXNlO1xyXG5cclxuICAgIC5tb2JpbGUtbmF2IHtcclxuICAgICAgY29sb3I6IGNvbG9yKHNlY29uZGFyeSk7XHJcbiAgICAgIHRleHQtc2hhZG93OiBub25lO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIubWFpbi1uYXYge1xyXG4gIGJhY2tncm91bmQ6IGNvbG9yKHByaW1hcnkpO1xyXG5cclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG5cclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IDg1dnc7XHJcbiAgcGFkZGluZy10b3A6IHNwYWNlKHhsYXJnZSk7XHJcblxyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcclxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC42cyBlYXNlLW91dDtcclxuXHJcbiAgei1pbmRleDogbGF5ZXIoaGlnaGVzdCk7XHJcblxyXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yKHByaW1hcnksIGxpZ2h0KTtcclxuICAgIGJveC1zaGFkb3c6IDAgMCByZW0oNXB4KSByZW0oMnB4KSByZ2JhKGNvbG9yKGRhcmssIGRhcmtlc3QpLCAuNCk7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwKTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgcGFkZGluZzogc3BhY2UoeHNtYWxsKTtcclxuICAgIC8vIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIC8vIHRvcDogMDtcclxuICAgIC8vIHJpZ2h0OiAwO1xyXG4gICAgLy8gdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgfVxyXG5cclxuICBhIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG5cclxuICAgIHBhZGRpbmc6IHNwYWNlKHNtYWxsLCBtZWRpdW0pO1xyXG5cclxuICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKGxhcmdlKTtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcblxyXG4gICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xyXG5cclxuICAgICAgcGFkZGluZzogcmVtKDRweCkgcmVtKDZweCk7XHJcbiAgICAgIG1hcmdpbjoge1xyXG4gICAgICAgIGxlZnQ6IHNwYWNlKHNtYWxsKTtcclxuICAgICAgICByaWdodDogc3BhY2Uoc21hbGwpO1xyXG4gICAgICB9O1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgJjpob3ZlcixcclxuICAgICY6Zm9jdXMge1xyXG4gICAgICB0ZXh0LXNoYWRvdzogbm9uZTtcclxuICAgICAgY29sb3I6IGNvbG9yKGxpZ2h0KTtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IoZGFyaywgZGFya2VzdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuZ28tdG8tc3RhcnQge1xyXG4gICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG5cclxuICAgIHNwYW4ge1xyXG4gICAgICBAaW5jbHVkZSBoaWRlLWVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmLmlzLWFjdGl2ZSB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XHJcbiAgfVxyXG59XHJcblxyXG4uc29jaWFsLW1lZGlhIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgd29yZC1zcGFjaW5nOiBzcGFjZShtZWRpdW0pO1xyXG5cclxuICBhIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIHBhZGRpbmc6IHJlbSgycHgpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblxyXG4gICAgJjpob3ZlcixcclxuICAgICY6Zm9jdXMge1xyXG4gICAgICBjb2xvcjogY29sb3IoZGFyayk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4ubW9iaWxlLW5hdiB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgYmFja2dyb3VuZDogY29sb3Ioc2Vjb25kYXJ5KTtcclxuICBib3JkZXI6IDA7XHJcbiAgb3V0bGluZTogbm9uZTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICB0b3A6IHNwYWNlKG1lZGl1bSk7XHJcbiAgcmlnaHQ6IDA7XHJcblxyXG4gIGhlaWdodDogcmVtKDVweCk7XHJcbiAgd2lkdGg6IHJlbSgzMHB4KTtcclxuXHJcbiAgdGV4dC1zaGFkb3c6IHJlbSgxcHgpIHJlbSgxcHgpIHJlbSgycHgpIGNvbG9yKGRhcmspLCAwIDAgMC4yZW0gY29sb3IoZGFyayk7XHJcblxyXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBsaW5lYXI7XHJcblxyXG4gIHotaW5kZXg6IGxheWVyKGhpZ2hlc3QpO1xyXG5cclxuICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxuXHJcbiAgJjpiZWZvcmUsXHJcbiAgJjphZnRlciB7XHJcbiAgICBAaW5jbHVkZSBjc3MtY29udGVudChyZW0oNXB4KSwgcmVtKDMwcHgpKTtcclxuXHJcbiAgICBiYWNrZ3JvdW5kOiBjb2xvcihzZWNvbmRhcnkpO1xyXG5cclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHJpZ2h0OiAwO1xyXG5cclxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjRzIGVhc2UtaW4tb3V0O1xyXG4gIH1cclxuXHJcbiAgJjpiZWZvcmUge1xyXG4gICAgdG9wOiByZW0oLTEwcHgpO1xyXG4gIH1cclxuXHJcbiAgJjphZnRlciB7XHJcbiAgICB0b3A6IHJlbSgxMHB4KTtcclxuICB9XHJcblxyXG4gIHNwYW4ge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBtaW4td2lkdGg6IDEwMCU7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDAlO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICBwYWRkaW5nOiBzcGFjZShzbWFsbCwgbWVkaXVtKTtcclxuICAgIGZvbnQtd2VpZ2h0OiBmb250LXdlaWdodChib2xkKTtcclxuICB9XHJcblxyXG4gICYuaXMtYWN0aXZlIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG5cclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHJpZ2h0OiBzcGFjZShsYXJnZSk7XHJcbiAgICB6LWluZGV4OiBsYXllcihoaWdoZXN0KSArIDI7XHJcblxyXG4gICAgJjpiZWZvcmUsXHJcbiAgICAmOmFmdGVyIHtcclxuICAgICAgdG9wOiAwO1xyXG4gICAgfVxyXG5cclxuICAgICY6YmVmb3JlIHtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgfVxyXG5cclxuICAgICY6YWZ0ZXIge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHNwYW4ge1xyXG4gICAgICBAaW5jbHVkZSBoaWRlLWVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi5hYm91dC1ldmVudCB7XHJcbiAgaDIge1xyXG4gICAgJiBzcGFuIHtcclxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgIGxldHRlci1zcGFjaW5nOiByZW0oMnB4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN2ZyB7XHJcbiAgICBtYXgtaGVpZ2h0OiAyZW07XHJcbiAgICBtYXgtd2lkdGg6IDJlbTtcclxuICAgIG1hcmdpbi1yaWdodDogc3BhY2Uoc21hbGwpO1xyXG4gIH1cclxufVxyXG4iLCIuc3BlYWtlcnMge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAvLyBvdmVyZmxvdzogaGlkZGVuO1xyXG5cclxuICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogc3BhY2UoeGxhcmdlKSAqIDEuNTtcclxuXHJcbiAgICAmOjpiZWZvcmUsXHJcbiAgICAmOjphZnRlciB7XHJcbiAgICAgIEBpbmNsdWRlIGNzcy1jb250ZW50KDEwMCUsIDEwMHZoKTtcclxuXHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgdG9wOiA1MCU7XHJcbiAgICAgIHotaW5kZXg6IGxheWVyKGxvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgJjo6YmVmb3JlIHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IocHJpbWFyeSk7XHJcbiAgICAgIHRyYW5zZm9ybTogc2tld1koMTNkZWcpIHRyYW5zbGF0ZVkoLTEyMCUpO1xyXG4gICAgfVxyXG5cclxuICAgICY6OmFmdGVyIHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3Ioc2Vjb25kYXJ5KTtcclxuICAgICAgdHJhbnNmb3JtOiBza2V3WSgtMTNkZWcpIHRyYW5zbGF0ZVkoMjAlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5hbGwtc3BlYWtlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB6LWluZGV4OiBsYXllcihtZWRpdW0pO1xyXG5cclxuICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgcGFkZGluZy10b3A6IHNwYWNlKGxhcmdlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi5zcGVha2VyIHtcclxuICBtYXgtd2lkdGg6IHJlbSgyNjBweCk7XHJcbiAgbWFyZ2luOiBzcGFjZShtZWRpdW0pIGF1dG87XHJcblxyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcblxyXG4gIHRyYW5zaXRpb246IGZpbHRlciAwLjRzIGVhc2UtaW47XHJcblxyXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB9XHJcblxyXG4gICY6aG92ZXIge1xyXG4gICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICAtd2Via2l0LWZpbHRlcjogZ3JheXNjYWxlKDEpO1xyXG4gICAgICAtbW96LWZpbHRlcjogZ3JheXNjYWxlKDEpO1xyXG4gICAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxKTtcclxuICAgIH1cclxuXHJcbiAgICA+IC5pbmZvIHtcclxuICAgICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC42KTtcclxuICAgICAgICB0b3A6IDEwMCU7XHJcbiAgICAgICAgY29sb3I6IGNvbG9yKGxpZ2h0KTtcclxuXHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW1nIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgaGVpZ2h0OiByZW0oMzUwcHgpO1xyXG4gICAgd2lkdGg6IHJlbSgyNjBweCk7XHJcblxyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICB9XHJcblxyXG4gIC5pbmZvIHtcclxuICAgIG1hcmdpbjogc3BhY2Uoc21hbGwpIGF1dG87XHJcblxyXG4gICAgei1pbmRleDogbGF5ZXIoaGlnaCk7XHJcblxyXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAzcyBsaW5lYXI7XHJcbiAgICB0cmFuc2l0aW9uLWRlbGF5OiAxcztcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIGhlaWdodDogcmVtKDM1MHB4KTtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG5cclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IHNwYWNlKHNtYWxsKTtcclxuICAgICAgcGFkZGluZy10b3A6IHNwYWNlKG1lZGl1bSk7XHJcblxyXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG5cclxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXMgZWFzZS1pbi1vdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaDQge1xyXG4gICAgICBjb2xvcjogY29sb3IoZGFyaywgZGFya2VzdCk7XHJcbiAgICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKGxhcmdlKTtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogc3BhY2Uoc21hbGwpO1xyXG5cclxuICAgICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBjb2xvcjogY29sb3IobGlnaHQpO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAmOjpiZWZvcmUsXHJcbiAgICAgICY6OmFmdGVyIHtcclxuICAgICAgICBjb2xvcjogY29sb3IocHJpbWFyeSk7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgICAgIGNvbG9yOiBjb2xvcihwcmltYXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICY6OmJlZm9yZSB7XHJcbiAgICAgICAgY29udGVudDogXCI8XCI7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiBlbShzcGFjZSh4c21hbGwpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiPlwiO1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiBlbShzcGFjZSh4c21hbGwpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGEge1xyXG4gICAgICBjb2xvcjogY29sb3IoZGFyayk7XHJcbiAgICAgIG1hcmdpbjoge1xyXG4gICAgICAgIHRvcDogc3BhY2Uoc21hbGwpO1xyXG4gICAgICAgIGJvdHRvbTogc3BhY2Uoc21hbGwpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICAgIGNvbG9yOiBjb2xvcihsaWdodCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICY6aG92ZXIsXHJcbiAgICAgICY6Zm9jdXMge1xyXG4gICAgICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgICAgIGNvbG9yOiBjb2xvcihkYXJrLCBkYXJrZXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwIHtcclxuICAgICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKHNtYWxsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuIiwiLnNjaGVkdWxlIHtcclxuICBiYWNrZ3JvdW5kOiBjb2xvciggc2Vjb25kYXJ5KTtcclxuICBjb2xvcjogY29sb3IobGlnaHQpO1xyXG4gIHBhZGRpbmctYm90dG9tOiBzcGFjZShsYXJnZSk7XHJcblxyXG4gIC53cmFwcGVyIHtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICB9XHJcblxyXG4gIC5zY2hlZHVsZS10YWJsZSB7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xyXG5cclxuICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgb3ZlcmZsb3cteDogaW5pdGlhbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5tb2JpbGUtZGlzY2xhaW1lciB7XHJcbiAgICBjb2xvcjogY29sb3IoZGFyaywgbGlnaHQpO1xyXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG5cclxuICAgIEBpbmNsdWRlIHJlc3BvbmQtdG8obGFyZ2UpIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGgyIHtcclxuICAgIGNvbG9yOiBjb2xvcihsaWdodCk7XHJcbiAgfVxyXG5cclxuICBhIHtcclxuICAgIGNvbG9yOiBjb2xvcihsaWdodCk7XHJcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCByZW0oMnB4KSBjb2xvcihwcmltYXJ5KTtcclxuICAgIG1hcmdpbi1ib3R0b206IHNwYWNlKHNtYWxsKTtcclxuXHJcbiAgICAmOmhvdmVyLFxyXG4gICAgJjpmb2N1cyB7XHJcbiAgICAgIGNvbG9yOiBjb2xvcihkYXJrLCBkYXJrZXN0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC50aXRsZSB7XHJcbiAgICBjb2xvcjogY29sb3IocHJpbWFyeSk7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKGxhcmdlKTtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogc3BhY2Uoc21hbGwpO1xyXG4gIH1cclxuXHJcbiAgdGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcblxyXG4gICAgZGl2IHtcclxuICAgICAgb3BhY2l0eTogLjg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGVhZCB7XHJcbiAgICB0aCB7XHJcbiAgICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKGxhcmdlKTtcclxuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGNvbG9yOiBjb2xvcihwcmltYXJ5KTtcclxuXHJcbiAgICBzcGFuIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIGNvbG9yOiBjb2xvcihsaWdodCk7XHJcbiAgICAgIGZvbnQtc2l6ZTogZm9udC1zaXplKHNtYWxsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoLFxyXG4gIHRkIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHBhZGRpbmc6IHNwYWNlKG1lZGl1bSwgbGFyZ2UpO1xyXG4gIH1cclxuXHJcbiAgdGJvZHkge1xyXG4gICAgdGgsXHJcbiAgICB0ZCB7XHJcbiAgICAgIGJvcmRlci10b3A6IHNvbGlkIHJlbSgxcHgpIGNvbG9yKGRhcmssIGxpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBbcm93c3Bhbl0ge1xyXG4gICAgICBib3JkZXItbGVmdDogc29saWQgcmVtKDFweCkgY29sb3IoZGFyaywgbGlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIFtjb2xzcGFuPVwiM1wiXSB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoY29sb3IobGlnaHQpLCAuMSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGQge1xyXG4gICAgICBtaW4td2lkdGg6IHJlbSgyODBweCk7XHJcblxyXG4gICAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgICAgbWluLXdpZHRoOiBhdXRvO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwIHtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICB9XHJcblxyXG4gIC5oaWdobGlnaHQtdXBwZXJjYXNlIHtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgfVxyXG59XHJcbiIsIi5sb2NhdGlvbiB7XHJcbiAgLndyYXBwZXIge1xyXG4gICAgQGluY2x1ZGUgcmVzcG9uZC10byhsYXJnZSkge1xyXG4gICAgICBAaW5jbHVkZSBjbGVhcmZpeDtcclxuXHJcbiAgICAgIGRpdiB7XHJcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgd2lkdGg6IDUwJTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZnJhbWUge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIG1hcmdpbjoge1xyXG4gICAgICAgIHRvcDogc3BhY2UobGFyZ2UpO1xyXG4gICAgICAgIGJvdHRvbTogc3BhY2UobGFyZ2UpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIuc3BvbnNvcnMge1xyXG4gIGgzIHtcclxuICAgIEBpbmNsdWRlIHNlcGFyYXRvcihjb2xvcihwcmltYXJ5KSwgY29sb3IoZGFyaywgbWVkaXVtKSk7XHJcbiAgfVxyXG5cclxuICBhIHtcclxuICAgIG1hcmdpbjoge1xyXG4gICAgICB0b3A6IHNwYWNlKHNtYWxsKTtcclxuICAgICAgYm90dG9tOiBzcGFjZShzbWFsbCk7XHJcbiAgICB9O1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGJvcmRlcjogMDtcclxuXHJcbiAgICBAaW5jbHVkZSByZXNwb25kLXRvKGxhcmdlKSB7XHJcbiAgICAgIG1hcmdpbjoge1xyXG4gICAgICAgIHRvcDogc3BhY2UobWVkaXVtKTtcclxuICAgICAgICBib3R0b206IHNwYWNlKG1lZGl1bSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgJjpob3ZlcixcclxuICAgICY6Zm9jdXMge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcihsaWdodCwgZGFyayk7XHJcbiAgICB9XHJcblxyXG4gICAgJjphY3RpdmUge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcihwcmltYXJ5LCBsaWdodCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbWcge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcblxyXG4gIC5zcG9uc29yIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcclxuXHJcbiAgICBtYXgtd2lkdGg6IHJlbSgxMDgwcHgpO1xyXG4gIH1cclxuXHJcbiAgLnR3by1tZWdhIHtcclxuICAgIGEge1xyXG4gICAgICBtYXgtd2lkdGg6IHJlbSgzMjBweCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAub25lLW1lZ2Ege1xyXG4gICAgQGluY2x1ZGUgc2VwYXJhdG9yKGNvbG9yKHByaW1hcnkpLCBjb2xvcihkYXJrLCBtZWRpdW0pKTtcclxuXHJcbiAgICBhIHtcclxuICAgICAgd2lkdGg6IDY1dnc7XHJcbiAgICAgIG1heC13aWR0aDogcmVtKDI1MHB4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5oYWxmLW1lZ2Ege1xyXG4gICAgQGluY2x1ZGUgc2VwYXJhdG9yKGNvbG9yKHByaW1hcnkpLCBjb2xvcihkYXJrLCBtZWRpdW0pKTtcclxuXHJcbiAgICBhIHtcclxuICAgICAgd2lkdGg6IDUwdnc7XHJcbiAgICAgIG1heC13aWR0aDogcmVtKDE4MHB4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5zdXBwb3J0IHtcclxuICAgIGEge1xyXG4gICAgICBtYXgtd2lkdGg6IHJlbSgxMjBweCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIiIsIi5mb290ZXIge1xyXG4gIGJhY2tncm91bmQ6IGNvbG9yKHNlY29uZGFyeSk7XHJcbiAgY29sb3I6IGNvbG9yKHByaW1hcnkpO1xyXG4gIGZvbnQtc2l6ZTogZm9udC1zaXplKHNtYWxsKTtcclxuXHJcbiAgaDUge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gIH1cclxufVxyXG4iXSwi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 */
