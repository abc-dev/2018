/// Retorna a largura calculada de acordo com uma quantidade X de colunas.
///
/// Quando o tipo do grid é flex ele assume que o elemento pai sera dividido na
/// quantidade de colunas configuradas. Ex: 12 colunas
///
/// @group   Tools [Ferramentas]
///
/// @return  {number} - Largura desejada
///
/// @param   {number} $col - Número de colunas desejadas
/// @param   {number} $type [flex-size] - Tipo do grid. Opções: `flex-size` e
///          `fixed-size`
///
/// @example scss - Uso
///   .elemento-com-largura-fixa {
///     width: column(4, fixed-size);
///   }
///   .elemento-com-largura-flexivel {
///     width: column(4);
///   }
///
/// @example scss - Compilado
///   .elemento-com-largura-fixa {
///     width: calc(33.33333333vw - 40px);
///   }
///   .elemento-com-largura-flexivel {
///     width: calc(33.33333333% - 40px);
///   }
@function column($col, $type: 'flex-size') {
  $result: null;

  @if type-of($col) != number {
    @warn 'O valor de "$col" precisa ser um numero';
  } @else if type-of($type) != string {
    @warn 'O valor de "$type" precisa ser uma string';
  } @else {
    $gutter-space: rem(map-get($grid, spacement));
    $total-width: _map-deep-get($grid, $type, max-width);
    $total-columns: map-get($grid, columns);

    $one-column-width: $total-width / $total-columns;

    $result: calc(#{$one-column-width * $col} - #{$gutter-space});
  }

  @return $result;
}
