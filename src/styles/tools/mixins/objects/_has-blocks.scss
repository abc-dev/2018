/// Este mixin divide a largura do elemento atual em colunas de igual largura
/// e determina a largura dos elementos filhos de acordo com o seletor passado
/// como parâmetro
///
/// @group   Objects [Objetos]
///
/// @param   {number} $count - Quantidade de colunas em que o container sera
///                            dividido. Deve ser um número inteiro.
/// @param   {string} $child-selector - Seletor dos elementos filhos aos quais
///                   sera atribuida a largura.
///                   Aceita qualquer seletor padrão do CSS, mas se recomenda o
///                   uso de classes por questão de performance
///
/// @example scss - Uso
///   .component-x {
///     @include has-blocks(
///       $count: 4,
///       $child-selector: '.classe-qualquer'
///     );
///   }
///   .component-z {
///     @include has-blocks(
///       $count: 2,
///       $child-selector: '[atributo-qualquer]'
///     );
///   }
///
/// @example scss - Compilado
///   .component-x {
///     display: flex;
///     align-items: flex-start;
///     flex-wrap: wrap;
///     justify-content: space-between;
///   }
///   .component-x .classe-qualquer {
///     width: calc((100% - 3.75rem) / 4);
///   }
///   .component-z {
///     display: flex;
///     align-items: flex-start;
///     flex-wrap: wrap;
///     justify-content: space-between;
///   }
///   .component-z [atributo-qualquer] {
///     width: calc((100% - 1.25rem) / 2);
///   }
@mixin has-blocks($count, $child-selector) {
  @if type-of($count) != number {
    @warn 'O valor atribuido a "$count" precisa ser um numero';
  } @else {
    $count: round($count);

    $spacement: space(grid) * $count;
    $column-width: calc((100% - #{$spacement}) / #{$count});

    @include grid-wrapper;

    #{$child-selector} {
      width: $column-width;
      margin: {
        right: space(grid) / 2;
        left: space(grid) / 2;
      };
    }
  }
}
